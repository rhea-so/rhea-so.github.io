<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021 Dev</title>
    <description>Junior Software Engineer Blog</description>
    <link>http://rhea-so.github.io/</link>
    <atom:link href="http://rhea-so.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Apr 2021 23:10:04 +0900</pubDate>
    <lastBuildDate>Tue, 06 Apr 2021 23:10:04 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>현재 내 삶</title>
        <description>&lt;p&gt;사외 워크샵 점심시간에 잠깐 포스트만 올려봅니다. test&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Feb 2021 15:45:39 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/my-life</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/my-life</guid>
        
        
        <category>일상</category>
        
      </item>
    
      <item>
        <title>고시원 탈출 프로젝트</title>
        <description>&lt;h2 id=&quot;사연&quot;&gt;사연&lt;/h2&gt;

&lt;p&gt;서울에서 살기 시작한지 어느덧 479일 째 되는 날입니다. (글쓴 날)&lt;br /&gt;
이렇게 시간이 지나가고, 국방부의 시계가 흐르는 와중에도, 제 삶에는 아무런 변화가 없었습니다.&lt;/p&gt;

&lt;p&gt;저는 아직도 서울 입성할때 들어간 고시원에서 아직도 살고 있습니다 T_T&lt;/p&gt;

&lt;h3 id=&quot;왜-아직도-고시원을-탈출-못했냐-하면&quot;&gt;왜 아직도 고시원을 탈출 못했냐 하면..&lt;/h3&gt;

&lt;p&gt;고시원에 살면 돈을 빨리 모을 수 있을거라 생각했고, 돈을 모아 더 좋은 집을 들어가는 큰 그림까지 그려보았습니다만..&lt;br /&gt;
현실이 그렇게 호락호락하지가 않더라구요.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;방이 좁으니까, 뭘 하려고 하면 밖에 나가야하고.. 밖에 나가면 돈을 자연스레 쓰게 되고..&lt;/li&gt;
  &lt;li&gt;밥도 방에서 못해먹으니,, 살인적인 강남 물가를 온 몸으로 버텨내야하고..&lt;/li&gt;
  &lt;li&gt;그렇다고 고시원 월세가 싼 것도 아니고.. (무슨 1평 월세가 50이야?)&lt;/li&gt;
  &lt;li&gt;사고 싶은 것이나, 하고 싶은 것이 있으면 참지 못하고 바로 해버리는 스타일이라..&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아무튼 돈이 영 모이질 않았습니다.&lt;br /&gt;
돈이 안모이니 나갈 생각은 자연스레 떠오르지가 않더라구요.&lt;/p&gt;

&lt;p&gt;이게 내 삶인가… 라고 생각하면서 받아드리면서 살고 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;어떻게든-고시원을-탈출해야겠다는-생각&quot;&gt;어떻게든 고시원을 탈출해야겠다는 생각&lt;/h3&gt;

&lt;p&gt;제 옆 호실에 새로운 분이 들어오셨습니다.&lt;br /&gt;
그리고 이분에게서 민원을 벌써 2차례나 받았습니다.&lt;/p&gt;

&lt;p&gt;사유는 소음.&lt;/p&gt;

&lt;p&gt;제가 방에서 전화하는 소리가 매우 시끄럽다는 겁니다.&lt;/p&gt;

&lt;p&gt;그래서 방에서 마음껏 전화를 못하게 되었습니다.&lt;br /&gt;
데시벨이 약 40 ~ 60 정도인데도 말입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/cry.gif&quot; alt=&quot;cry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;반대로, 저도 소음으로 인한 스트레스를 겪고 있습니다.&lt;/p&gt;

&lt;p&gt;옆 방에서 알람 울리는 소리, 다른 방 들어갈때 문 닫히는 쾅 소리…&lt;br /&gt;
집 바로 앞이 오락실이라 삐슝빠슝 귀를 찌르는 소리에, 술집도 있어서 시끄럽게 떠드는 소리, 차 쌩쌩 지나가는 소리.. 등등&lt;/p&gt;

&lt;p&gt;잠을 통 재대로 못자니 회사에서 일을 재대로 할 수나 있을까요..&lt;/p&gt;

&lt;p&gt;게다가 방에는 온갖 벌레들이 들끓었고, 곰팡이도 잔뜩 피고, 공기도 탁하고, 공간도 좁고, 천장도 낮고…&lt;/p&gt;

&lt;p&gt;빨래를 하게 되면, 다른 사람들과 공용으로 사용하는 세탁기와 건조기를 사용하기 때문에 양말이 하나씩 사라지는 일은 허다했습니다.&lt;br /&gt;
다른 사람들이 사용한다고 제가 빨래를 돌리지 못한 일들도 있었고..&lt;/p&gt;

&lt;p&gt;더 이상 고시원에 있기는 나도 지치고, 다른 사람들에게도 민폐라 생각되었고,&lt;br /&gt;
“빠른 시일내에 좋은 집을 구해 꼭 이사를 하리라..!”라는 다짐을 하게 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;난생-처음해보는-집-알아보기&quot;&gt;난생 처음해보는 집 알아보기&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/mansae.gif&quot; alt=&quot;mansae&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이사를 합시다!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;성인이 되고 난 다음, 처음으로 해보는 집구하기여서 굉장히 설렜습니다.&lt;br /&gt;
이제야 진짜 자취를 하게 되는구나..!!&lt;/p&gt;

&lt;p&gt;다짐을 한 즉시, 바로 행동으로 옮겼습니다.&lt;/p&gt;

&lt;p&gt;그렇게 서울을 잘 알지도 못하는 우물 속 개구리인 시골 청년의 서울 집 구하기 프로젝트가 시작되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;제-나름-생각해본-방-구하기-기준&quot;&gt;제 나름 생각해본 방 구하기 기준&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;소음 (제일 중요. 밖에서 내 소리가 안들리고, 옆집 소리 안들리고..)&lt;/li&gt;
  &lt;li&gt;해충&lt;/li&gt;
  &lt;li&gt;교통 (얼마나 강남과 가까운가??)&lt;/li&gt;
  &lt;li&gt;방 크기&lt;/li&gt;
  &lt;li&gt;방 옵션&lt;/li&gt;
  &lt;li&gt;보안 (집 들어가기 전 보안 과정을 거치나?)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;새로운-집에서-꼭-하고-싶은-것들&quot;&gt;새로운 집에서 꼭 하고 싶은 것들&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;작업실 만들기 (이제 밖에서 돈쓰지 말자)&lt;/li&gt;
  &lt;li&gt;요리&lt;/li&gt;
  &lt;li&gt;VR&lt;/li&gt;
  &lt;li&gt;욕조 (집에서 꼭 목욕하고 싶어요)&lt;/li&gt;
  &lt;li&gt;게스트 초대하기!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;어른들께-받은-조언들&quot;&gt;어른들께 받은 조언들&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/advise.gif&quot; alt=&quot;advise&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;최대한 많은 집을 둘러보며, 눈을 익힐 것&lt;/li&gt;
  &lt;li&gt;집 보자마자 괜찮다고 바로 덜컥 계약하지 말 것
    &lt;ol&gt;
      &lt;li&gt;훨씬 더 좋은 매물들이 있으면, 보고 배 아파 죽는다. (가성비, 퀄리티 등등)&lt;/li&gt;
      &lt;li&gt;꼭 여러 부동산들을 거쳐볼 것&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;마음에 드는 집을 여러개 찾고 난 후, 이 중에서 하나를 정할 것
    &lt;ol&gt;
      &lt;li&gt;마음에 드는 집을 하나 찾자마자 바로 정하면, 1번과 같은 문제가 발생할 수 있다&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;마음에 드는 집의 대출 여부를 확인할 것
    &lt;ol&gt;
      &lt;li&gt;공인중개사 왈, 보증금 3000만원까지는 세입자에게 우선권이 있어서 돈을 돌려받는데 전혀 문제가 없다고 한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;마음에 드는 집의 공과금 잔금 여부를 확인할 것
    &lt;ol&gt;
      &lt;li&gt;확인 요소
        &lt;ol&gt;
          &lt;li&gt;가스&lt;/li&gt;
          &lt;li&gt;전기&lt;/li&gt;
          &lt;li&gt;수도&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;이전에 살던 사람이 돈을 안내고 갔으면, 내가 내야하는 다이나믹한 상황이 펼쳐짐.. 내가 쓰지도 않은 것들을 내야하면 아깝잖아?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;인터넷은 꼭 이사 일주일 전에 신청해둘 것
    &lt;ol&gt;
      &lt;li&gt;가스, 전기, 수도와는 다르게 시간이 걸리는 작업임&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;계약 후, 빠른 시일내에 확정일자와 전입신고를 한번에 할 것
    &lt;ol&gt;
      &lt;li&gt;전입신고와 확정일자는 동사무소에 민증과 계약서를 들고가면 할 수 있음&lt;/li&gt;
      &lt;li&gt;동시에 하게 되면, 법적 효력이 더 좋다고 들음&lt;/li&gt;
      &lt;li&gt;신고한 다음 날 0시부터 효력이 있음&lt;/li&gt;
      &lt;li&gt;보증금을 지키는데 사용됨&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;마음에 드는 집은 먼저 가계약을 할 것
    &lt;ol&gt;
      &lt;li&gt;가계약을 하면, 다른 사람들이 집 계약 못한다! 우선 순위는 무조건 가계약을 한 사람들에게 있다&lt;/li&gt;
      &lt;li&gt;가계약을 하고 난 다음 취소하게 되면, 가계약시 걸은 돈을 돌려받지 못한다&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;집-알아볼때-사용한-것들&quot;&gt;집 알아볼때 사용한 것들&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;집토스 &lt;a href=&quot;https://ziptoss.com&quot;&gt;https://ziptoss.com&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;집 계약시, 복비 안내도 됨 (집 주인에게서만 받는 구조)&lt;/li&gt;
      &lt;li&gt;수수료 0원 (프로모션 이벤트를 3월 31일까지 한다고 하네요)&lt;/li&gt;
      &lt;li&gt;아침에 문의 넣으면, 당일 오후에 바로 집 구경 가능&lt;/li&gt;
      &lt;li&gt;하루에 최대 5개까지 문의 가능&lt;/li&gt;
      &lt;li&gt;한번 지정된 매니저는 변경되지 않는 것 같음 (같은 지역 내 한정)&lt;/li&gt;
      &lt;li&gt;저같은 경우는 이 어플 엄청 많이 애용했습니다.&lt;br /&gt;
만난 중개사분들 전부 다 엄청 친절하셨어요.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;피터팬의 좋은 집 구하기 &lt;a href=&quot;https://www.peterpanz.com&quot;&gt;https://www.peterpanz.com&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;직거래가 많음&lt;/li&gt;
      &lt;li&gt;허위 매물이 많은 것 같았음..&lt;/li&gt;
      &lt;li&gt;집이라고 해놓고 고시원인 경우가 있었음.. (고속터미널 쪽)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;해당 지역 공인중개사&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;예산-1차&quot;&gt;예산 1차&lt;/h3&gt;

&lt;p&gt;예산은 300/50으로 잡았습니다. (관리비 포함)&lt;/p&gt;

&lt;h3 id=&quot;첫날&quot;&gt;첫날&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/첫날.png&quot; alt=&quot;첫날&quot; /&gt;&lt;/p&gt;

&lt;p&gt;회사를 걸어갈 수 있는 거리인 반포동부터 먼저 알아보았습니다.&lt;/p&gt;

&lt;p&gt;매물 개수가 신논현에 5개정도 있었는데, 다 방 컨디션이 영…&lt;/p&gt;

&lt;p&gt;게다가 다 반지하였습니다.&lt;/p&gt;

&lt;p&gt;본 모든 반지하들은 다 공기청정기를 엄청 시끄럽게 풀로 돌리고 있었습니다..&lt;/p&gt;

&lt;p&gt;직감이 바로 오더라구요…&lt;/p&gt;

&lt;p&gt;반지하는 살 곳이 안된다는 것을..&lt;/p&gt;

&lt;p&gt;와,.. 무슨 해도 안들고,,. 비오면 어우.. 끔찍해..&lt;/p&gt;

&lt;p&gt;너무 충격적이어서 사진은 올리지 않겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/반지하.png&quot; alt=&quot;반지하&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 반지하에서 살고 계신 트친분이 알려주신 반지하 장단점..&lt;/p&gt;

&lt;p&gt;강남, 신논현, 논현 등 반포동 쪽 매물은 깔끔하게 포기했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;집이 아니라 창고가 나오는데, 창고가 월세 50이 넘어요. ㅋㅋ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;둘째날&quot;&gt;둘째날&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/둘째날.png&quot; alt=&quot;둘째날&quot; /&gt;&lt;/p&gt;

&lt;p&gt;강남에서 점점 멀어지기 시작했습니다.&lt;/p&gt;

&lt;p&gt;신천(현 잠실새내) 쪽이 좀 저렴한 매물들이 많다고 나와서 알아보기 시작했습니다.&lt;/p&gt;

&lt;p&gt;옥탑도 나오고, 반지하도 나오고, 1층도 나오고 정말 다양했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/옥탑.png&quot; alt=&quot;옥탑&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 중 가장 충격적이었던 옥탑.&lt;/p&gt;

&lt;p&gt;옥탑 방 올라가는게 정말 다이나믹한데다 (삐끗해서 넘어지면 바로 저세상. 추락..)  바로 앞에 사무실이 있고..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/화장실.png&quot; alt=&quot;화장실&quot; /&gt;&lt;/p&gt;

&lt;p&gt;화장실이 방 밖에 따로 있습니다.. ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;사무실과 같이 씁니다 ㅋㅋ 샤워는 커녕 볼일도 보기 흉합니다 ㅋㅋㅋ..&lt;/p&gt;

&lt;p&gt;위생이 정말..&lt;/p&gt;

&lt;p&gt;그렇다고 집이 넓은 것도 아니고,&lt;br /&gt;
창문을 열면 전선과 쇠파이프 등의 향연..&lt;/p&gt;

&lt;p&gt;방에서 이상한 냄새도 나고, 좀 전반적으로 낡았고…&lt;/p&gt;

&lt;p&gt;그렇다고 월세가 저렴한 것도 아니고.. 이게 분명 35였나? 40이었나?&lt;/p&gt;

&lt;p&gt;옥탑이니까 이렇다고 치고,&lt;/p&gt;

&lt;p&gt;1층 ~ 3층 방을 보면 어찌.. 좀 상황이 달라질까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/곰팡이.png&quot; alt=&quot;곰팡이&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아뇨? 이 가격대에서는 여전히 곰팡이가 득실거리고, 오래된 방 밖에 찾아볼 수 없었습니다.&lt;/p&gt;

&lt;p&gt;제일 놀랐던 건, 바로 옆에 주차장이어서 창문이 달려있어봤자 열지도 못하는 집도 있었다는 사실.. ㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;신천에 삼전이라고 하는 9호선 지하철 역이 생기면서부터, 전반적으로 10 ~ 20만원이 올랐다고 하더라구요.&lt;/p&gt;

&lt;p&gt;그래도, 반포동보다는 나았습니다.&lt;/p&gt;

&lt;p&gt;지상 매물이 있잖아요?&lt;/p&gt;

&lt;p&gt;아 맞다 참. 집인 척하는 고시원도 있었어요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;잠실 쪽으로 가보았습니다만, 여전히 어림도 없었습니다.&lt;br /&gt;
강남으로부터 더 멀어져야 할 필요가 있을 것 같습니다.&lt;/p&gt;

  &lt;p&gt;강남으로부터 멀어지면 멀어질 수록 가격이 싸지는 &lt;strong&gt;Magic&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;셋째날&quot;&gt;셋째날&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/셋째날.png&quot; alt=&quot;셋째날&quot; /&gt;&lt;/p&gt;

&lt;p&gt;건대까지 올라왔습니다.&lt;/p&gt;

&lt;p&gt;건대는 대학가니까, 다른 곳에 비해서 괜찮은 매물들이 많이 있지 않을까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/낡았어요.png&quot; alt=&quot;낡았어요&quot; /&gt;&lt;/p&gt;

&lt;p&gt;드디어 집이 나오긴 했습니다!!&lt;br /&gt;
근데.. 어.. 근데 너무 낡았어요..&lt;/p&gt;

&lt;p&gt;저 바닥 울퉁불퉁한거 보이시나요?&lt;/p&gt;

&lt;p&gt;발을 스윽 가져다대니까 엄청 느껴지더라구요.. 바위 같은 것이..&lt;/p&gt;

&lt;p&gt;집에서 등산하는 느낌을 내고 싶으신 분들께 강추!!!!&lt;/p&gt;

&lt;p&gt;도배도 다시 해놓았던데(더덕더덕 붙혀서 가린 느낌), 다 곰팡이가 있기 때문에 한게 아닐까..? 라는 생각이 들더라구요&lt;/p&gt;

&lt;p&gt;화장실에 깨진 바닥 타일 사이사이에서 물이 올라오질 않나…&lt;/p&gt;

&lt;p&gt;에어컨도 오래된.. 필터 낡은거 보이고..&lt;/p&gt;

&lt;p&gt;이 돈으로 이런 곳 밖에 못들어간다면,, 돈을 더 올렸을때 어떨까? 라는 생각이 들더라구요&lt;/p&gt;

&lt;p&gt;1000/60 매물을 보여달라고 부탁드려서 가봤는데, 방이 완전 180도 달라지더라구요&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/와.png&quot; alt=&quot;와&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다 새거인거 보세요&lt;/p&gt;

&lt;p&gt;와..&lt;/p&gt;

&lt;p&gt;드디어 깔끔하고 괜찮은 집이 나왔습니다.&lt;/p&gt;

&lt;p&gt;서울에서 혼자 사려면 월세 1000/60은 기본인가 봅니다..?&lt;/p&gt;

&lt;p&gt;+엘리베이터도 있고, 건물 입구에 보안 문도 있고..&lt;/p&gt;

&lt;p&gt;어우 갑자기 슬퍼지기 시작했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대학 거리로 갔지만, 여전히 이 돈 가지고는 제대로 된 집을 볼 수 없었습니다.&lt;br /&gt;
1000/60 이상부터 괜찮은 집들이 나오기 시작했는데, 혼자서 이 가격을 다 부담하기에는 너무 힘듭니다.&lt;/p&gt;

  &lt;p&gt;좋아요. 친구 한 명과 같이 살아본다면 어떨까요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;넷째날&quot;&gt;넷째날&lt;/h3&gt;

&lt;p&gt;셋째날과 동일하게 건대에서 매물을 찾기 시작했습니다.&lt;/p&gt;

&lt;p&gt;대신, 조건이 변경되었습니다.&lt;/p&gt;

&lt;p&gt;보증금이 1000만원까지, 월세가 85까지로 예산이 증가했습니다.&lt;/p&gt;

&lt;p&gt;매물 7개 정도를 봤는데, 요약이 되더라구요&lt;/p&gt;

&lt;h4 id=&quot;낡았지만-넓은-방&quot;&gt;낡았지만, 넓은 방&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/햇빛.png&quot; alt=&quot;햇빛&quot; /&gt;
	드디어 햇빛이 들어옵니다 와!&lt;br /&gt;
	역시 돈을 낼수록 좋아집니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/천장.png&quot; alt=&quot;천장&quot; /&gt;
	하지만, 낡은 것은 어쩔수가 없나봅니다..!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;리모델링이-되어-있지만-작은-방&quot;&gt;리모델링이 되어 있지만, 작은 방&lt;/h4&gt;

&lt;p&gt;세입자가 있어서 못찍었어요&lt;/p&gt;

&lt;p&gt;되게 그랬어요. 뭐라 설명할지 모르겠네요.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;비싼-방&quot;&gt;비싼 방&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/그나마.png&quot; alt=&quot;그나마&quot; /&gt;
	월세 85에 관리비까지 추가로??&lt;br /&gt;
	그래도, 방 컨디션은 크게 나쁘진 않았다..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/음.png&quot; alt=&quot;음&quot; /&gt;
	근데 솔직히, 이 방에 이 가격..?&lt;br /&gt;
	더 좋은게 있지 않을까..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/옵션.png&quot; alt=&quot;옵션&quot; /&gt;
	풀옵션이긴 한데 좀.. 비싸다&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;지금까지-요약&quot;&gt;지금까지 요약&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;300/50으로 반포, 잠실, 건대는 어림도 없었다&lt;/li&gt;
  &lt;li&gt;혼자 살거면 1000/60은 있어야 한다&lt;/li&gt;
  &lt;li&gt;1000/85로 올리니까 건대에 괜찮은 매물이 조금 있었다&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;최종적으로-이사를-다짐한-집&quot;&gt;최종적으로 이사를 다짐한 집&lt;/h2&gt;

&lt;p&gt;아무래도, 집토스 같은 공인중개사 어플은 정말 그 지역에 괜찮은 매물들을 알려주진 않나 보네요.&lt;/p&gt;

&lt;p&gt;인터넷을 모르는 집주인일수록(할머니, 할아버지) 더더욱 안나오는 듯함.&lt;/p&gt;

&lt;p&gt;위에서 1000/85 매물을 하기로 친구랑 마음을 정했는데,&lt;br /&gt;
이게 정말 제일 좋은 매물인가? 싶어서 근처에 있는 아무 부동산에 처들어가서 물어보았어요.&lt;/p&gt;

&lt;p&gt;그동안 겪었던 모든 이야기를 중개사분께 말씀드리고,&lt;br /&gt;
좋은 방 있냐 물어보니까, 딱 하나 보여줄테니까 이거 보고 들어가라고..&lt;/p&gt;

&lt;p&gt;이거 아니면 사실상 너네 그 마인드로는 평생 방 못 구한다고.. 하시더라구요?&lt;/p&gt;

&lt;p&gt;밑져야 본전이니까 속는 셈치고 한번 따라가봤어요. 에이 좋아봤자 얼마나 좋겠어???&lt;/p&gt;

&lt;p&gt;그렇게 따라간 집은 놀라웠습니다 ㄹㅇ.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;리모델링 새로 싹 다함
    &lt;ol&gt;
      &lt;li&gt;지금 입주하면, 리모델링 한 이후 첫 입주가 됨&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;방에 창문이 태평양만하게 넓었음&lt;/li&gt;
  &lt;li&gt;다 새거임!!!!&lt;/li&gt;
  &lt;li&gt;화장실 겁나 김.. 넓은게 아니라 김&lt;/li&gt;
  &lt;li&gt;환풍구 다 잘 갖추어져 있음&lt;/li&gt;
  &lt;li&gt;바닥 마감, 벽 마감 나쁘지 않았음&lt;/li&gt;
  &lt;li&gt;작은 방은 창문 마음껏 열어도 됨
    &lt;ol&gt;
      &lt;li&gt;바로 앞에 다른 건물 벽임. 집 창문이 아니라 눈치 안보임. 그렇다고 햇빛 안들어오는 것도 아님!!&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;저녁에 그 집 가봤는데, 주변에 소음이 거의 없었음
    &lt;ol&gt;
      &lt;li&gt;좀 안쪽이라 그런가, 사람들이 많이 안다님&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;집에서 소리 질러봤는데, 밖에서 아예 안들렸음
    &lt;ol&gt;
      &lt;li&gt;아니, 노래방이세요?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;건대입구역까지 천천히 걸어서 9분? 정도 걸림&lt;/li&gt;
  &lt;li&gt;집 바로 뒤가 공원이라, 화나는 일 있을때 산책 가능&lt;/li&gt;
  &lt;li&gt;방 넓음&lt;/li&gt;
  &lt;li&gt;주변에 큰 코인 빨래방 있음&lt;/li&gt;
  &lt;li&gt;인덕션 아님!!!! 가스레인지임!!!!!!!!
    &lt;ol&gt;
      &lt;li&gt;인덕션은 라면 끓여먹을때나 쓰라 이거야~&lt;/li&gt;
      &lt;li&gt;인덕션은 요리 절대 못함..&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;1000/80 해주신단다!!!!!!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/아니방크기가무슨.png&quot; alt=&quot;아니방크기가무슨&quot; /&gt;&lt;/p&gt;

&lt;p&gt;창문 ㅋㅋㅋㅋㅋ 넓은거봐라 ㅋㅋㅋㅋ 와 ㅋㅋㅋㅋㅋㅋ &lt;br /&gt;
방도 넓은거 느껴지나요? ㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/창문.png&quot; alt=&quot;창문&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뭔 ㅋㅋㅋ 밖에서 봐도 뭔 ㅋㅋㅋ 창문 크기가 진짜 미쳤음&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/작은방.png&quot; alt=&quot;작은방&quot; /&gt;&lt;/p&gt;

&lt;p&gt;작은 방도 그동안 봤던 집들 중에서 제일 넓었던 것 같음.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/배치좋아.png&quot; alt=&quot;배치좋아&quot; /&gt;&lt;/p&gt;

&lt;p&gt;화장실 길어요 ㅋㅋㅋ
근데 생각해보면 이런 배치가 오히려 수건 젖을 일도 없고, 오히려 더 괜찮은 것 같아요&lt;/p&gt;

&lt;p&gt;사진으로는 못 담았는데, 여기가 2층이고, 2층에 다른 가구는 없어요.&lt;/p&gt;

&lt;p&gt;한 층 다 씀 엌ㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;집 들어갈때 눈치 안보임, 옆 방 소음도 없음. 오로지 위층 아래층만.&lt;/p&gt;

&lt;p&gt;진짜 내가 들어갈 집은 문을 열자마자 안다더니, 이 집이 딱 그랬음..&lt;/p&gt;

&lt;p&gt;이거 방 보자마자 바로 부모님께 연락돌리고 가계약 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;남자 두 명이서 건대 입구 역 근처에 1000/80 집을 찾았다&lt;/li&gt;
  &lt;li&gt;인테리어 새로 했고, 방도 넓다&lt;/li&gt;
  &lt;li&gt;집토스 등 어플만으로 집을 알아보는건 한계가 명확했다
    &lt;ol&gt;
      &lt;li&gt;꼭 그 지역 공인중개사를 통해서 매물을 더 알아볼 것&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;서울에서 혼자 살려면 1000/60이 시작이었다&lt;/li&gt;
  &lt;li&gt;고시원은 지옥이다&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;이사-전에-꼭-확인해야-하는-것들&quot;&gt;이사 전에 꼭 확인해야 하는 것들&lt;/h2&gt;

&lt;p&gt;이사를 하기 전에 사전에 먼저 확인해야하는 것들은 예상 외로 많았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-02-21-plan-of-moving-house/counting.gif&quot; alt=&quot;counting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;이것도 해야하고, 저것도 해야하고, 아차 이것도 해야했지 참 … 등등&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;출퇴근-시간-환경&quot;&gt;출퇴근 시간, 환경&lt;/h3&gt;

&lt;p&gt;꼭 사전에 먼저 타임워치로 시간 재둘 것&lt;br /&gt;
1시간을 넘어가는 순간부터 많이 피곤해지니까 참고할 것&lt;/p&gt;

&lt;h3 id=&quot;주변-인프라&quot;&gt;주변 인프라&lt;/h3&gt;

&lt;p&gt;주 거래 은행, 마트는 필수&lt;br /&gt;
음식점이나 기타 편의시설있으면 있을수록 더 좋다&lt;/p&gt;

&lt;p&gt;건대가 이런거 다 있어서 괜찮더라&lt;/p&gt;

&lt;h3 id=&quot;가스-전기-수도-인터넷&quot;&gt;가스, 전기, 수도, 인터넷&lt;/h3&gt;

&lt;p&gt;꼭 이전 세입자가 다 내고 나갔는지 확인할 것&lt;br /&gt;
인터넷은 일주일 전에 신청 할 것&lt;/p&gt;

&lt;h3 id=&quot;가스-신청법&quot;&gt;가스 신청법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;명의변경 신청하기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;이사로 인해 가스사용자가 변경되는 경우 명의변경을 하시는 것이 좋습니다.&lt;/li&gt;
  &lt;li&gt;명의변경 신청은 각 지역 도시가스 회사 고객센터에 문서(전자문서 포함함) 또는 전화로 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;전 가스사용자의 미납금액이 있는 경우 명의변경이 되지 않으므로 명의변경을 신청하는 경우 계량기와 미납금액을 확인하시기 바랍니다.&lt;/li&gt;
  &lt;li&gt;명의변경을 신청하지 않으면 전 가스사용자의 권리와 의무를 승계한 것이 되어 전 가스사용자의 미납요금을 납부해야 할 경우도 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.seoulgas.co.kr/front/customer/faqList.do#none&quot;&gt;https://www.seoulgas.co.kr/front/customer/faqList.do#none&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/mimoa88/221854712178&quot;&gt;https://m.blog.naver.com/mimoa88/221854712178&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;꼭 최소 3일 전에 연락해서, 가스 연결해두기!!&lt;/p&gt;

&lt;h3 id=&quot;전기-신청법&quot;&gt;전기 신청법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;요금 정산, 납부하기
    &lt;ol&gt;
      &lt;li&gt;이사 당일 전력사용지침(계량기 현재 지침)을 한전 사이버지점, 고객센터(☎ 국번없이 123) 또는 관할 한전지점에 전화로 신고한 후, 희망하는 방법(신용카드 납부 또는 납부자가 지정하는 계좌에서 출금)으로 전기요금을 납부하시면 됩니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;명의변경 신청하기
    &lt;ol&gt;
      &lt;li&gt;이사로 인해 전기사용자가 변경되는 경우 전출자와 전입자는 그 변경내용을 변경발생 후 14일 이내에 한국전력공사에 통지해야 합니다[「전기공급약관」 (한국전력공사약관, 2020. 6. 2. 시행) 제12조제1항].&lt;/li&gt;
      &lt;li&gt;전출자(1주택 수가구 및 종합계약아파트 거주자인 전출자은 신청불가)는 다음의 방법 중 어느 하나를 선택하여 명의변경을 신청하시면 됩니다.&lt;/li&gt;
      &lt;li&gt;한국전력공사 사이버지점에 접속하여 인터넷 신청하기&lt;/li&gt;
      &lt;li&gt;한국전력공사 고객센터(☎ 국번없이 123)로 전화신청하기&lt;/li&gt;
      &lt;li&gt;한국전력공사 지점으로 방문하거나 전화신청하기&lt;/li&gt;
      &lt;li&gt;※ 계약전력이 6KW 이상(일반적인 가정용 전력은 대부분 5KW 이하임)경우 전기사용명의변경 신청방법과 구비서류에 관한 자세한 내용은 &amp;lt; 한전 사이버지점 ( http://cyber.kepco.co.kr )-신청·접수-업무찾기-명의 변경 &amp;gt; 부분에서 확인하실 수 있습니다.&lt;/li&gt;
      &lt;li&gt;이사로 인해 전입자가 명의변경에 따른 사용자별 요금 구분청구를 신청할 경우에는 전기요금은 사용자 변경일을 기준으로 전출자, 전입자별로 각각 계산하여 청구됩니다(「전기공급약관」 제12조제3항 본문).&lt;/li&gt;
      &lt;li&gt;다만, 변경일 이후에 사용자별 요금 구분청구를 신청할 경우에는 미납요금에 한하여 변경일이 속한 해당 월의 사용전력량을 전출자, 전입자와 협의하여 결정하고 이에 따라 요금은 각각 계산하여 청구됩니다(「전기공급약관」 제12조제3항 단서).&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;수도-신청법&quot;&gt;수도 신청법&lt;/h3&gt;

&lt;p&gt;생략&lt;/p&gt;

&lt;h3 id=&quot;인터넷-신청법&quot;&gt;인터넷 신청법&lt;/h3&gt;

&lt;p&gt;가까운 대리점가서 의뢰하면 다 됨&lt;/p&gt;

&lt;p&gt;대칭형과 비대칭형 차이를 꼭 알아둘 것&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.100mb.kr/bbs/board.php?bo_table=information&amp;amp;wr_id=11162&quot;&gt;https://www.100mb.kr/bbs/board.php?bo_table=information&amp;amp;wr_id=11162&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coolenjoy.net/bbs/37/212973?page=17&quot;&gt;https://coolenjoy.net/bbs/37/212973?page=17&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;대칭형으로 꼭 설치하자&lt;/p&gt;

&lt;h3 id=&quot;건물-대출-여부&quot;&gt;건물 대출 여부&lt;/h3&gt;

&lt;p&gt;있으면.. 눈치껏..&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;p&gt;공실 공과금&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ppomppu.co.kr/zboard/view.php?id=house&amp;amp;no=58663&quot;&gt;https://www.ppomppu.co.kr/zboard/view.php?id=house&amp;amp;no=58663&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/babypanda1228/221775347157&quot;&gt;https://m.blog.naver.com/babypanda1228/221775347157&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=new2222a&amp;amp;logNo=221562854927&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=new2222a&amp;amp;logNo=221562854927&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;이사-후-생활&quot;&gt;이사 후 생활&lt;/h2&gt;

&lt;p&gt;새로운 글로 다시 뵙겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Feb 2021 15:45:39 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/plan-of-moving-house</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/plan-of-moving-house</guid>
        
        
        <category>일상</category>
        
      </item>
    
      <item>
        <title>Typescript + Mocha + NYC로 TDD하기</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;TDD = 테스트를 염두에 둔 프로그램 개발 방법&lt;br /&gt;
단위 테스트 = Mocha (Node Module)&lt;br /&gt;
테스트 커버리지 = NYC (Node Module)&lt;/p&gt;

&lt;p&gt;TDD가 뭐고, Mocha와 NYC를 이용해 어떻게 Typescript 코드를 TDD 할 수 있는지를 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;tdd란&quot;&gt;TDD란?&lt;/h3&gt;

&lt;p&gt;테스트 주도 개발(Test-driven development, TDD)은 매우 짧은 개발 사이클을 반복하는 소프트웨어 개발 프로세스 중 하나입니다.&lt;/p&gt;

&lt;p&gt;우선 개발자는 바라는 향상 또는 새로운 함수를 정의하는 (초기적 결함을 점검하는) 자동화된 테스트 케이스를 작성합니다.&lt;/p&gt;

&lt;p&gt;그런 후에, 그 케이스를 통과하기 위한 최소한의 양의 코드를 생성합니다.&lt;/p&gt;

&lt;p&gt;그리고 마지막으로 그 새 코드를 표준에 맞도록 리팩토링합니다.&lt;/p&gt;

&lt;p&gt;즉 “테스트를 염두에 둔 프로그램 개발 방법”입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/non-tdd.png&quot; alt=&quot;non-tdd&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기존의 개발 프로세스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/use-tdd.png&quot; alt=&quot;use-tdd&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트 주도 개발 프로세스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이와 같이 그림을 통해 한눈에 차이점을 알 수 있습니다.&lt;br /&gt;
테스트 코드를 작성하며 결과를 예상해볼 수 있기에 설계의 문제로 인한 오류 개선 속도가 한층 빨라질 것임을 직관적으로 알 수 있습니다.&lt;br /&gt;
TDD 개발을 하면서 얻을 수 있는 큰 장점 중 하나로 보입니다.&lt;/p&gt;

&lt;p&gt;물론 TDD가 필요해 보이긴 하지만 평소 해오던 개발 방법을 바꾸기에는 충분한 이유가 되지 않아 보입니다.&lt;br /&gt;
그래서 앞으로 TDD의 장점이 정확히 무엇인지 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TDD(Test-driven development)의 장점은 무엇인가?&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;객체지향적인-코드-개발&quot;&gt;&lt;strong&gt;객체지향적인 코드 개발&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;테스트 코드를 먼저 작성한다면 좀 더 명확한 기능과 구조를 설계할 수 있습니다.&lt;br /&gt;
각각의 함수를 정의할 때 각각의 기능들에 대해서 철저히 구조화 시켜 코드를 작성할 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;그 이유는 테스트의 용이성을 위해 복잡한 기능을 한 함수에 모두 구현할 경우 테스트 방식이 복잡해지고 시간이 오래 걸리며 코드 수정이 되는 경우 테스트 코드를 재사용할 수 없게 되기 때문입니다.&lt;/p&gt;

&lt;p&gt;자연스럽게 TDD의 목적인 코드의 재사용성을 보장하며 코드를 작성하게 됩니다.&lt;/p&gt;

&lt;p&gt;결국 TDD는 “모든 코드”가 재사용성 기반으로 작성되어야 하기 때문에 보다 기본적으로 객체지향적인 코드가 되는 것입니다.​&lt;/p&gt;

&lt;h4 id=&quot;설계-수정-시간의-단축&quot;&gt;&lt;strong&gt;설계 수정 시간의 단축&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;앞에서 그림과 함께 설명한 것처럼 테스트 코드를 먼저 작성하기 때문에 최초 설계 안을 만족시키며 입출력 구조와 기능의 정의를 명확히 하게 되므로 설계의 구조적 문제를 바로 찾아내게 됩니다.&lt;/p&gt;

&lt;p&gt;실제로 테스트 코드를 작성하면서 인터페이스나 클래스의 구조들을 많이 수정하게 됩니다.&lt;/p&gt;

&lt;p&gt;그리고 미리 테스트 시나리오를 작성해봄으로써 코드 개발 전 기능을 구현하기 위한 예외 상황들을 미리 확인해보고 조사하게 되는 효과가 발생하여 예외 코드를 작성하기 쉬워집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/결함은-일찍-찾을수록-고치는-비용이-적게-든다.jpg&quot; alt=&quot;결함&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;결함 수정 비용에 대한 예시(출처: &lt;a href=&quot;https://www.slideshare.net/koreakihoon/tdd-112099012&quot;&gt;https://www.slideshare.net/koreakihoon/tdd-112099012&lt;/a&gt;, TDD 관련 발표 자료)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;디버깅-시간의-단축&quot;&gt;&lt;strong&gt;디버깅 시간의 단축&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;기본적으로 단위 테스트 기반의 테스트 코드를 작성하기 때문에 추후 문제가 발생하였을 때 각각의 모듈 별로 테스트를 진행해보면 문제의 지점을 쉽게 찾아낼 수 있습니다. 만약 TDD 개발이 아니라면 특정 버그를 찾기 위해서 모든 영역의 코드들을 살펴봐야 할 것입니다.&lt;/p&gt;

&lt;p&gt;문제가 발생할 수 있는 지점은 DB 영역, Application 영역, Data 영역, Memory 영역 등 다양하기 때문에 모든 영역을 통합 테스트하게 되면 쉽게 문제의 지점을 찾을 수 없게 됩니다.&lt;/p&gt;

&lt;p&gt;하지만 TDD 개발로 인해 각각의 단위 테스트를 진행하게 된다면 영역을 분할하여 쉽게 찾아낼 수 있을 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/tdd-cycle.png&quot; alt=&quot;tdd-cycle&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TDD Cycle in Unit Test(출처: &lt;a href=&quot;http://memee.github.io/tdd/#/7&quot;&gt;http://memee.github.io/tdd/#/7&lt;/a&gt;, TDD 관련 발표 자료)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;유지-보수의-용이성&quot;&gt;&lt;strong&gt;유지 보수의 용이성&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;대부분의 개발자는 설계 및 코드 작성 시 기술적인 관점으로 바라보게 됩니다.&lt;br /&gt;
기술적인 관점이 나쁜 것은 아니지만 기능 자체의 실현에 목적을 두기 때문에 코드가 복잡해지고 테스트가 어려워집니다.&lt;/p&gt;

&lt;p&gt;TDD 개발로 인해 항상 그 테스트 요소들이 사용자 관점으로 정의되고 진행되기 때문에 입력과 출력의 흐름이 명확해지고 추후 구조의 변경 및 소스 수정 시 구조를 쉽게 파악하고 빠른 수정이 가능해집니다.&lt;br /&gt;
더불어 재사용 테스트도 쉽게 가능해집니다.&lt;/p&gt;

&lt;h4 id=&quot;테스트-문서의-대체-가능&quot;&gt;&lt;strong&gt;테스트 문서의 대체 가능&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;대부분의 개발 프로젝트 진행 시 테스트를 진행하는 경우 단순 통합 테스트에 지나지 않습니다.&lt;br /&gt;
즉, 내부적으로 개별적인 모듈들이 어떻게 테스트 되었는지 제공할 수 없습니다.&lt;br /&gt;
하지만 TDD를 구현하게 될 경우에 테스팅을 자동화 시킴과 동시에 보다 정확한 테스트 근거를 산출할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이와 같이 TDD는 많은 장점을 가지고 있으며 개별적인 개발 시 테스트를 고려한 코드 작성으로 개발 시간이 늦어지는 단점이 보일 수 있으나 전체적인 개발 시간은 비슷하거나 단축되는 효과가 있습니다.&lt;br /&gt;
이후 코드 수정 및 구조 추가의 용이성을 생각해본다면 기본적으로 TDD를 적용한 개발 방법이 많은 도움이 될 것이라고 보입니다.&lt;/p&gt;

&lt;h3 id=&quot;mocha&quot;&gt;Mocha&lt;/h3&gt;

&lt;h4 id=&quot;mocha가-무엇인가요&quot;&gt;&lt;strong&gt;Mocha가 무엇인가요?&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/mocha-1.png&quot; alt=&quot;mocha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/mocha-2.png&quot; alt=&quot;mocha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mocha는 Node.js 테스트 프레임워크로써, Javascript 코드의 단위 테스트 기능을 제공합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mocha말고 Jest라는 테스트 프레임워크도 존재합니다.&lt;br /&gt;
그런데, Mocha에 비해 속도가 많이 떨어지는 등의 문제가 있어서 사용하지 않는 것을 추천합니다.&lt;br /&gt;
&lt;a href=&quot;https://libsora.so/posts/escape-from-jest-jest-is-slow/&quot;&gt;Jest 탈출기 - Jest는 느리다&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;설치-방법&quot;&gt;&lt;strong&gt;설치 방법&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i mocha &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;
npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; mocha  &lt;span class=&quot;c&quot;&gt;# 자주 사용할 예정이신 경우, Global로 설치하는 것을 추천합니다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;사용-방법&quot;&gt;&lt;strong&gt;사용 방법&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;테스트 코드를 아래를 참고하여 작성합니다.&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 테스트 블록&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    describe = context : 테스트 suite&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    it = specify : 단위테스트&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 훅 메소드&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    before() : 블록 범위 내 전체 테스트 전에 실행&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    after() : 블록 범위 내 전체 테스트 후에 실행&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    beforeEach() : 블록 범위 내 각 단위테스트 직전에 실행&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    afterEach() : 블록 범위 내 각 단위테스트 직후에 실행&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 유용한 팁&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    1. mocha의 context를 사용할 일이 있다면 화살표함수를 사용하면 안된다. this에 접근할 수 없게되기 때문이다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    2. 타임아웃은 개별 테스트 케이스의 describe레벨에서 this.timeout(5000); 설정. 전역적으로 하려면 mocha --timeout 5000&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    3. 특정 조건에서 런타임에 테스트를 무시하고 싶다면 this.skip(); 을 쓰자.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        3-1. if (condition) this.skip();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//             ex. 로컬에서는 성공할수 없는 테스트이거나, 특정 os에서 동작하지 않는 코드인 경우 등&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    4. npm 스크립트 등록하고 쓰는 것을 추천 : npm test = &quot;mocha --exit --timeout 5000 test/**/*.spec.js&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        4-1. 내부적으로 ./node_modules/mocha 를 실행&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    5. #태그를 달고 mocha grep으로 태그가 달린 것만 테스트해볼 수도 있다. (cold-test)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Test suite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;전체 테스트 전에 실행&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;블록 범위 내 각 테스트 전에 실행&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;전체 테스트 후에 실행&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;블록 범위 내 각 테스트 후에 실행&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;should be ok&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 비동기 테스트 종료&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/mocha-6.png&quot; alt=&quot;mocha&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 이미지처럼, 테스트 코드를 작성합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이후, 터미널에서 Mocha를 실행해 단위 테스트를 진행합니다&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mocha
mocha &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# test 폴더에 있는 테스트 코드들을 전부 실행 (하위 디렉터리까지 다 잡아줌)&lt;/span&gt;
mocha dist/test  &lt;span class=&quot;c&quot;&gt;# dist/test 폴더 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/mocha-7.png&quot; alt=&quot;mocha&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트시 위와 같이 터미널에 결과가 나옵니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/mocha-8.png&quot; alt=&quot;mocha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;package.json에 코드를 등록해놓으면 보다 편하게 사용할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;vscode-extension&quot;&gt;&lt;strong&gt;VSCode Extension&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/mocha-5.png&quot; alt=&quot;mocha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VSCode에 Mocha를 사용하기 편하게 Explorer 형식으로 제공해주는 Extension이 존재합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-mocha-test-adapter&quot;&gt;https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-mocha-test-adapter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/mocha-4.png&quot; alt=&quot;mocha&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 Extension을 설치하게 되면, VSCode에 새로운 메뉴가 생기고, 메뉴에서 위 사진처럼 테스트를 원클릭으로 편하게 테스트할 수 있습니다.&lt;/p&gt;

&lt;p&gt;test 파일도 다 있고, mocha 명령어로 실행했을때 다 잘 잡는데 Extension 메뉴에는 안잡힌다면 아래 파일을 추가 or 수정해보세요.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim .vscode/settings.json

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;mochaExplorer.files&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;dist/99_Test/**/*.js&quot;&lt;/span&gt;,  &lt;span class=&quot;c&quot;&gt;# 본인의 테스트 파일 위치&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;mochaExplorer.envPath&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,  &lt;span class=&quot;c&quot;&gt;# 본인 환경에 맞게 설정&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;mochaExplorer.require&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 본인 환경에 맞게 설정&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nyc&quot;&gt;NYC&lt;/h3&gt;

&lt;h4 id=&quot;nyc가-무엇인가요&quot;&gt;&lt;strong&gt;NYC가 무엇인가요?&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;테스트가 얼마나 잘 진행되고 있는지를 확인할 수 있도록, 테스트 커버리지를 잘 정리해서 보여주는 프레임워크입니다.&lt;/p&gt;

&lt;h4 id=&quot;설치-방법-1&quot;&gt;&lt;strong&gt;설치 방법&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i nyc &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;사용-방법-1&quot;&gt;&lt;strong&gt;사용 방법&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nyc mocha  &lt;span class=&quot;c&quot;&gt;# 터미널에 테스트 커버리지를 띄웁니다&lt;/span&gt;
nyc &lt;span class=&quot;nt&quot;&gt;--check-coverage&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--lines&lt;/span&gt; 90  &lt;span class=&quot;c&quot;&gt;# 총 코드 범위가 90 % 미만이면 실패합니다&lt;/span&gt;
nyc &lt;span class=&quot;nt&quot;&gt;--check-coverage&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--lines&lt;/span&gt; 90 &lt;span class=&quot;nt&quot;&gt;--per-file&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 하나 이상의 파일의 코드 적용 범위가 90 % 미만이면 실패합니다&lt;/span&gt;
nyc &lt;span class=&quot;nt&quot;&gt;--reporter&lt;/span&gt; html mocha  &lt;span class=&quot;c&quot;&gt;# 테스트 커버리지 결과를 HTML로 보여줍니다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/nyc-2.png&quot; alt=&quot;nyc-2&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Terminal로 출력한 경우&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/nyc-1.png&quot; alt=&quot;nyc-1&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTML로 출력한 경우&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/nyc-3.png&quot; alt=&quot;nyc-3&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;내부 코드들의 모든 분기를 다 테스트해서 보여줍니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mocha와-nyc를-사용한-tdd-flow&quot;&gt;Mocha와 NYC를 사용한 TDD Flow&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-mocha-nyc-typescript/scenario.png&quot; alt=&quot;scenario&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개발 목표 설정&lt;/li&gt;
  &lt;li&gt;테스트 코드 작성&lt;/li&gt;
  &lt;li&gt;테스트 코드 리뷰&lt;/li&gt;
  &lt;li&gt;메인 로직 코드 작성&lt;/li&gt;
  &lt;li&gt;Mocha로 단위 테스트 진행
    &lt;ol&gt;
      &lt;li&gt;하나라도 문제가 발생한다면, 4번으로 돌아갑니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 단위 테스트가 통과했다면, NYC를 이용해 테스트 커버리지 확인
    &lt;ol&gt;
      &lt;li&gt;개발 팀내에서 정한 테스트 커버리지에 부합되지 않으면, 5번으로 돌아갑니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;메인 로직 코드 리뷰&lt;/li&gt;
  &lt;li&gt;Git Push&lt;/li&gt;
  &lt;li&gt;Pull Request or Merge Request&lt;/li&gt;
  &lt;li&gt;CI/CD (Jenkins, CircleCI)&lt;/li&gt;
  &lt;li&gt;PM2 or Docker or Kubernetes에 배포 (Production 환경에 맞추어 진행)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;다른-회사들의-tdd-적용기&quot;&gt;다른 회사들의 TDD 적용기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/sungil/android-tdd-jeogyonggi?slide=157&quot;&gt;https://speakerdeck.com/sungil/android-tdd-jeogyonggi?slide=157&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://woowabros.github.io/study/2018/03/01/spock-test.html&quot;&gt;https://woowabros.github.io/study/2018/03/01/spock-test.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/669&quot;&gt;https://blog.outsider.ne.kr/669&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/suresofttech/221569611618&quot;&gt;https://m.blog.naver.com/suresofttech/221569611618&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sjh836.tistory.com/174&quot;&gt;https://sjh836.tistory.com/174&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.skby.net/tdd-test-driven-development/&quot;&gt;http://blog.skby.net/tdd-test-driven-development/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 20:45:45 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/mocha-nyc-typescript</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/mocha-nyc-typescript</guid>
        
        
        <category>개발-방법</category>
        
      </item>
    
      <item>
        <title>Javascript</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-what-is-javascript/javascript.png&quot; alt=&quot;javascript&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;웹 브라우저 콘솔에서 Javascript를 사용하는 모습&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바스크립트(영어: JavaScript)는 객체 기반의 스크립트 프로그래밍 언어입니다.&lt;br /&gt;
이 언어는 웹 브라우저 내에서 주로 사용하며, 다른 응용 프로그램의 내장 객체에도 접근할 수 있는 기능을 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;또한 &lt;strong&gt;Node.js&lt;/strong&gt;와 같은 런타임 환경과 같이 서버 프로그래밍에도 사용되고 있습니다.&lt;br /&gt;
자바스크립트는 본래 넷스케이프 커뮤니케이션즈 코퍼레이션의 브렌던 아이크(Brendan Eich)가 처음에는 모카(Mocha)라는 이름으로,&lt;br /&gt;
나중에는 라이브스크립트(LiveScript)라는 이름으로 개발하였으며, 최종적으로 자바스크립트가 되었습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트가 썬 마이크로시스템즈의 자바와 구문이 유사한 점도 있지만, 이는 사실 두 언어 모두 C 언어의 기본 구문에 바탕을 뒀기 때문이고, &lt;strong&gt;자바와 자바스크립트는 직접적인 관련성이 없습니다.&lt;/strong&gt;&lt;br /&gt;
이름과 구문 외에는 자바보다 셀프나 스킴과 유사성이 많습니다.&lt;/p&gt;

&lt;p&gt;ECMA스크립트는 쉽게 말해 자바스크립트의 표준화된 버전입니다.&lt;br /&gt;
모질라 1.8 베타 1이 나오면서 XML에 대응하는 확장 언어인 E4X(ECMA-357)를 부분 지원하게 되었습니다.&lt;/p&gt;

&lt;p&gt;자바스크립트는 브라우저마다 지원되는 버전이 다릅니다.&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;역사&quot;&gt;역사&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;넷스케이프에서의 시작&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-what-is-javascript/netscape.jpg&quot; alt=&quot;netscape&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1993년, 일리노이 대학교 어배너-섐페인의 NCSA는 최초의 대중적인 그래픽 웹 브라우저인 NCSA 모자이크를 출시하였습니다.&lt;/p&gt;

&lt;p&gt;1994년, 모자이크 커뮤니케이션스라는 이름의 회사가 캘래포니아주 마운틴 뷰에 설립되었으며 모자이크 넷스케이프를 만들기 위해 오리지널 NCSA 모자이크 개발자들을 고용하였습니다.&lt;/p&gt;

&lt;p&gt;그러나 NCSA 모자이크와 코드는 의도적으로 공유하지 않았습니다.&lt;br /&gt;
이 기업의 브라우저의 내부 코드명은 모질라였으며 이는 “Mosaic and Godzilla”에서 비롯된 용어입니다.&lt;/p&gt;

&lt;p&gt;이 웹 브라우저의 첫 버전인 모자이크 넷스케이프 0.9는 1994년 말에 출시되었습니다.&lt;br /&gt;
4개월 후 브라우저 시장의 3/4를 잠식하면서 1990년대에 주된 웹 브라우저가 되었습니다.&lt;br /&gt;
NCSA의 상표 소유권 문제를 회피하고자 이 브라우저는 같은 해에 “넷스케이프 내비게이터”로 이름을 바꾸었으며 이 기업은 “넷스케이프 커뮤니케이션스”라는 이름을 취하였습니다.&lt;/p&gt;

&lt;p&gt;넷스케이프 커뮤니케이션스는 웹이 더 동적으로 변화할 필요가 있었음을 실감했습니다.&lt;br /&gt;
기업의 설립자 Marc Andreessen은 HTML에 코드를 웹 페이지 마크업으로 직접 작성하면서 웹 디자이너들과 파트타입 프로그래머들이 이미지, 플러그인 등의 요소를 쉽게 조합할 수 있는 글루 언어(glue language)가 필요했습니다고 믿었습니다.&lt;/p&gt;

&lt;p&gt;1995년, 넷스케이프 커뮤니케이션스는 스킴 프로그래밍 언어를 넷스케이프 내비게이터에 임베디드하기 위해 브렌던 아이크를 영입하였습니다.&lt;br /&gt;
시작 전에 넷스케이프 커뮤니케이션스는 넷스케이프 내비게이터 썬의 더 정적인 프로그래밍 언어인 자바를 포함시키기 위해 썬 마이크로시스템즈와 협업했으며 이는 사용자에게 웹 기술 및 플랫폼을 채택시키려는 마이크로소프트와 경쟁하기 위해서였습니다.&lt;/p&gt;

&lt;p&gt;넷스케이프 커뮤니케이션스는 이때 자신들이 만들기 바랐던 스크립트 언어가 자바를 구현할 것이고 비슷한 문법을 채용하는 것이 좋겠다고 생각했으며 펄, 파이썬, Tcl, 스킴 등 기타 언어를 채택하는 것을 배제하였습니다.&lt;br /&gt;
경쟁적인 제안에 대항하여 자바스크립트 개념을 방어하기 위해 이 기업은 프로토타입이 필요했습니다.&lt;br /&gt;
아이크는 1995년 5월 10일 안에 이를 작성했습니다.&lt;/p&gt;

&lt;p&gt;원래 모카(Mocha)라는 이름으로 개발되었으나 이 언어는 공식적으로 라이브스크립트(LiveScript)로 불렸으며 이 당시 1995년 9월 넷스케이프 내비게이터 2.0의 베타 릴리스가 이루어졌으나 나중에 이름이 자바스크립트로 바뀌었는데 이는 12월 넷스케이프 내비게이터 2.0 베타 3에 채용되었습니다.&lt;/p&gt;

&lt;p&gt;이름의 최종 선정에 혼란이 야기되었는데 이 언어가 자바 프로그래밍 언어에서 파생되었습니다는 인상을 심었으며 이러한 선택이 마케팅적인 특징을 보였고 이는 넷스케이프가 당시 인기있는 웹 프로그래밍 언어로서 자바스크립트를 내밀기 위한 것이었습니다.&lt;/p&gt;

&lt;h3 id=&quot;자바와-자바스크립트-그리고-j스크립트&quot;&gt;자바와 자바스크립트, 그리고 J스크립트&lt;/h3&gt;

&lt;p&gt;라이브스크립트의 이름이 자바스크립트로 변경된 것은 대략 넷스케이프가 자사의 넷스케이프 내비게이터 웹 브라우저에 자바 기술에 대한 지원을 포함하기 시작할 즈음입니다.&lt;/p&gt;

&lt;p&gt;자바스크립트는 1995년 12월 출시된 넷스케이프 2.0B3에서부터 공개, 채택되었습니다.&lt;br /&gt;
자바스크립트라는 이름은 상당한 혼란을 가져왔습니다.&lt;/p&gt;

&lt;p&gt;이것은 자바와 자바스크립트 간에는 구문이 유사하다는 점(양쪽 모두 C에 바탕을 두었기 때문에) 외에는 실제 관련성이 없었기 때문입니다.&lt;br /&gt;
두 언어는 의미론적으로 매우 다르고, 특히 각각의 객체 모델은 관련성이 없는 데다가 상당 부분이 호환되지 않습니다.&lt;/p&gt;

&lt;p&gt;웹 페이지 향상 언어로서 자바스크립트의 성공에 자극받은 마이크로소프트는 J스크립트로 알려진 호환 언어를 개발하게 되었습니다.&lt;br /&gt;
J스크립트는 1996년 8월에 출시된 인터넷 익스플로러 브라우저 3.0부터 지원 되기 시작했습니다.&lt;br /&gt;
IE 브라우저에서의 자바스크립트 사용은 실제로는 J스크립트의 사용을 의미하는 것이었습니다.&lt;/p&gt;

&lt;p&gt;이에 대한 표준화 요구는 ECMA스크립트에 대한 ECMA-262 표준의 기반이 되었으며, 1996년 11월 이후 세 번째 판까지 출판되었습니다.&lt;br /&gt;
자바스크립트와 함께 자주 쓰이는 용어인 DOM은 사실 ECMA스크립트 표준의 일부가 아니며, 그것은 자체로 하나의 표준이고 XML에 기반을 둡니다.&lt;/p&gt;

&lt;h3 id=&quot;상표&quot;&gt;상표&lt;/h3&gt;

&lt;p&gt;“자바스크립트”(JavaScript)는 오라클의 상표입니다.&lt;br /&gt;
넷스케이프 커뮤니케이션스가 발명, 구현한 기술 및 모질라 재단과 같은 독립 기관의 라이선스 하에 사용됩니다.&lt;/p&gt;

&lt;h3 id=&quot;헬로-월드-프로그램&quot;&gt;헬로 월드 프로그램&lt;/h3&gt;

&lt;p&gt;아래는 자바스크립트와 HTML5로 이루어진 헬로 월드 프로그램이며, 실선 내부가 자바스크립트로 처리된 부분을 설명합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;자바스크립트 페이지&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;브라우저가 자바스크립트 기능을 지원하지 않거나 자바스크립트 기능이 꺼져 있습니다.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;문법&quot;&gt;문법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;단순 문법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트의 변수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; 키워드를 사용하여 정의할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Declares a function-scoped variable named `x`, and implicitly assigns the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// special value `undefined` to it.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// More explicit version of the above.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Declares a block-scoped variable named `y`, and implicitly sets it to&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `undefined`. The `let` keyword was introduced in ECMAScript 2015.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// More explicit version of the above.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Declares a block-scoped, un-reassign-able variable named `z`, and sets it to&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `undefined`. The `const` keyword was also introduced in ECMAScript 2015, and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// must be explicitly assigned to.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Declares a variable named `myNumber`, and assigns a number literal (the value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `2`) to it.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Reassigns `myNumber`, setting it to a string literal (the value `&quot;foo&quot;`).&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// JavaScript is a dynamically-typed language, so this is legal.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;HTML과 자바스크립트&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML은 &amp;lt; &amp;gt; 태그로 엘리먼트(element)를 정의합니다면, 이러한 HTML의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; Hello, World! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 엘리먼트에 일대일 대응하는 자바스크립트(ECMA스크립트)는&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello, World!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처럼 정의됩니다.&lt;br /&gt;
여기서처럼 HTML과 자바스크립트 간에는 광범위한 호환성을 보장하는 동전의 양면성 같은 구조를 엿볼 수 있는데, 이것이 가능한 것은 DOM 때문이라고 말할 수 있습니다.&lt;/p&gt;

&lt;p&gt;한편 자바스크립트는 HTML과의 연동관계에서 HTML의 로딩시점 또는 초기화와 관련된 즉시 실행 함수(Immediately invoked function expression)를 제공합니다.&lt;/p&gt;

&lt;h3 id=&quot;버전-역사&quot;&gt;버전 역사&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;버전&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;출시일&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;내용&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;넷스케이프&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;내비게이터&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;모질라&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;파이어폭스&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;인터넷&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;익스플로러&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;오페라&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;사파리&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;크롬&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1996년 3월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1996년 8월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1997년 6월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.0-4.05&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1998년 10월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ECMA-262 1st + 2nd edition&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.06-4.7x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;넷스케이프&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;서버&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2000년 11월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ECMA-262 3rd edition&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.0-5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0-10.0.666&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2005년 11월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.5 + array extras + array and string generics + E4X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2006년 10월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.6 + Pythonic generators + iterators + let&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28.0.1500.95&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2008년 6월&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.7 + generator expressions + expression closures&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11.50&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8 + native JSON support + minor updates&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2009년 6월 22일&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8.1 + minor updates&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2010년 7월 27일&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8.2 + new features for ECMA-262 5th edition compliance&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;프로그래밍-언어&quot;&gt;프로그래밍 언어&lt;/h3&gt;

&lt;p&gt;한편 자바스크립트에서 사용되는 기초적인 문법의 개념으로는 속성과 메소드를 갖는 객체(오브젝트) 개념이 있으며, 변수 선언, 함수 정의, 연산자 그리고 제어문등을 이 프로그래밍 언어의 주요 개념으로 언급할수 있을 뿐만 아니라 이 언어가 속한 객체 지향 프로그래밍언어(OOP)의 공통적인 주요 개념이기도 합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/자바스크립트&quot;&gt;wikipedia - Javascript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/ECMA스크립트&quot;&gt;ECMA스크립트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/DHTML&quot;&gt;DHTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/자바스크립트_엔진&quot;&gt;자바스크립트 엔진&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/Ajax&quot;&gt;Ajax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/프로토타입_자바스크립트_프레임워크&quot;&gt;프로토타입 자바스크립트 프레임워크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 14:53:45 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/what-is-javascript</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/what-is-javascript</guid>
        
        
        <category>기본적인-프론트엔드-지식</category>
        
      </item>
    
      <item>
        <title>CSS</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;종속형 시트 또는 캐스케이딩 스타일 시트(Cascading Style Sheets, CSS)는 마크업 언어가 실제 표시되는 방법을 기술하는 언어로, HTML과 XHTML에 주로 쓰이며, XML에서도 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;W3C의 표준이며, 레이아웃과 스타일을 정의할 때의 자유도가 높습니다.&lt;/p&gt;

&lt;p&gt;마크업 언어(ex: HTML)가 웹사이트의 몸체를 담당합니다면 CSS는 옷과 액세서리처럼 꾸미는 역할을 담당합니다고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;즉, HTML 구조는 그대로 두고 CSS 파일만 변경해도 전혀 다른 웹사이트처럼 꾸밀 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;역사&quot;&gt;역사&lt;/h3&gt;

&lt;p&gt;CSS는 1994년 10월 10일, 하콤 비움 리(Håkon Wium Lie)가 처음 제안하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;버전의 변화&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS는 지속적으로 새로운 버전이 나오고 있습니다.&lt;br /&gt;
1996년에 도입된 CSS 1은 CSS의 바탕이 되었습니다.&lt;br /&gt;
CSS의 표준으로는 CSS 2.1이 있으며 이전 버전에 비하여 새로운 기능과 도구가 추가되었습니다.&lt;/p&gt;

&lt;p&gt;CSS는 여러 수준과 프로파일을 가지고 있습니다.&lt;br /&gt;
각 수준의 CSS는 일반적으로 새로운 기능을 담고 있으며 CSS1, CSS2, CSS3, CSS4로 나뉩니다.&lt;br /&gt;
프로파일들은 일반적으로 특정한 장치나 사용자 인터페이스를 위해 만들어진 하나 이상 수준의 CSS의 하부 집합입니다.&lt;br /&gt;
현재 휴대용 장치, 프린터, 텔레비전 수상기를 위한 프로파일들이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;첫 CSS 규격은 공식 W3C 권고안이 되었으며 그 이름은 CSS1입니다.&lt;br /&gt;
1996년 12월에 발표되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS2는 W3C가 개발하였으며 1998년 5월에 권고안으로 발표되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS3는 2005년 12월 5일 이후 개발 중에 있습니다.&lt;br /&gt;
W3C CSS3 로드맵은 요약과 도입부를 제공하고 있습니다.&lt;br /&gt;
전체가 모듈화되어 사용자 에이전트가 모듈에 대한 모든 모듈을 지원하지 않거나 자유롭게 선택할 수 있도록 하고 있으며, 다른 세로 글쓰기와 HTML 이외의 규격에까지 관여하는 내용으로 되어 있습니다.&lt;br /&gt;
현재 어떤 모듈도 권고안까지 이른 것은 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;하나의 통합된 CSS4 사양은 없는데, 이는 여러 개의 모듈로 나뉘어 있는데 기인합니다.&lt;br /&gt;
그러나 “레벨 4” 모듈들이 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;문법&quot;&gt;문법&lt;/h3&gt;

&lt;p&gt;CSS는 단순한 문법을 가지며, 수많은 영어 키워드를 사용하여 다양한 스타일의 프로퍼티의 이름을 규정합니다.&lt;/p&gt;

&lt;p&gt;스타일 시트는 규칙의 목록으로 구성됩니다. 각 규칙이나 규칙 집합은 하나 이상의 셀렉터와 하나의 선언 블록을 이룹니다.&lt;/p&gt;

&lt;p&gt;CSS는 따로 CSS만의 코드가 필요하지 않고, 그대로 HTML 문서에 CSS의 키워드를 넣으면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;셀렉터&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS에서 셀렉터(selector)는 마크업 자체에 태그와 속성을 일치시킴으로써 어느 부분의 마크업에 스타일을 적용할지 선언합니다.&lt;/p&gt;

&lt;p&gt;클래스와 ID들은 대소문자를 구분하며 문자로 시작해야 하며 영숫자와 언더바(_)를 포함할 수 있습니다.&lt;br /&gt;
클래스는 어떠한 요소의 어떠한 수의 인스턴스에도 적용할 수 있습니다. ID는 하나의 요소에만 적용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;선언 블록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;선언 블록은 괄호로 이루어진 선언들의 목록으로 이루어집니다. 각 선언은 그 자체가 프로퍼티, 콜론( : ), 값으로 구성됩니다.&lt;br /&gt;
한 블록 안에 여러 선언이 있으면, 세미콜론 ( ; )이 개개의 각 선언에 삽입되어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;원천&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS 정보는 다양한 원천으로부터 제공받을 수 있습니다.&lt;br /&gt;
이러한 원천으로는 웹 브라우저, 사용자, 제작자가 될 수 있습니다. &lt;br /&gt;
제작자로부터의 정보는 더 나아가 인라인, 미디어 타입, 중요성, 셀렉터 특정, 규칙 순서, 상속, 프로퍼티 정의로 분류될 수 있습니다.&lt;/p&gt;

&lt;p&gt;CSS 스타일의 정보는 별도의 문서에 있을 수 있고, HTML 문서에 직접 추가할 수도 있습니다. &lt;br /&gt;
사용되는 출력 장치에 따라 다른 스타일을 적용할 수 있습니다.&lt;br /&gt;
이를테면 화면 버전은 인쇄 버전과 매우 다르므로 제작자는 각 매체에 적절한 표현 방식을 사용할 수 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;우선도&lt;/td&gt;
      &lt;td&gt;CSS 원천의 종류&lt;/td&gt;
      &lt;td&gt;설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;중요성&lt;/td&gt;
      &lt;td&gt;‘!important’은 이전의 우선 타입들을 덮어습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;인라인&lt;/td&gt;
      &lt;td&gt;HTML ‘style’ 속성을 통해 HTML 요소에 적용되는 스타일&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;미디어 타입&lt;/td&gt;
      &lt;td&gt;미디어 특정 CSS가 정의되어 있지 않다면 프로퍼티 정의는 모든 미디어 타입에 적용됩니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;사용자 정의&lt;/td&gt;
      &lt;td&gt;대부분의 브라우저가 접근성 기능을 갖추고 있습니다: 사용자 정의 CSS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;셀렉터 특정성&lt;/td&gt;
      &lt;td&gt;특정 컨텍스트 셀렉터(#heading p)는 일반 정의를 덮어습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;규칙 순서&lt;/td&gt;
      &lt;td&gt;마지막 규칙 선언은 가장 높은 우선 순위를 가집니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;부모 상속&lt;/td&gt;
      &lt;td&gt;프로퍼티를 지정하지 않으면, 부모 요소에 상속됩니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;HTML 문서 안에서의 CSS 프로퍼티 정의&lt;/td&gt;
      &lt;td&gt;CSS 규칙 또는 CSS 인라인 스타일은 기본 브라우저 값을 덮어습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;브라우저 기본값&lt;/td&gt;
      &lt;td&gt;가장 낮은 우선 순위: 브라우저 기본값은 W3C 초기값 사양에 정의되어 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;CSS 우선 순위 스킴 (높은 순위에서 낮은 순위 순)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/종속형_시트&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 14:53:00 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/what-is-css</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/what-is-css</guid>
        
        
        <category>기본적인-프론트엔드-지식</category>
        
      </item>
    
      <item>
        <title>HTML</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-what-is-html/netscape.gif&quot; alt=&quot;netscape&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1994년도 웹 브라우징 모습&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하이퍼텍스트 마크업 언어(HyperText Markup Language)는 웹 페이지를 위한 지배적인 마크업 언어입니다.&lt;/p&gt;

&lt;p&gt;HTML은 제목, 단락, 목록 등과 같은 본문을 위한 구조적 의미를 나타내는 것뿐만 아니라 링크, 인용과 그 밖의 항목으로 구조적 문서를 만들 수 있는 방법을 제공합니다.&lt;br /&gt;
그리고 이미지와 객체를 내장하고 대화형 양식을 생성하는 데 사용될 수 있습니다.&lt;/p&gt;

&lt;p&gt;HTML은 웹 페이지 콘텐츠 안의 꺾쇠 괄호에 둘러싸인 “태그”로 되어있는 HTML 요소 형태로 작성합니다.&lt;br /&gt;
HTML은 웹 브라우저와 같은 HTML 처리 장치의 행동에 영향을 주는 자바스크립트와 본문과 그 밖의 항목의 외관과 배치를 정의하는 CSS 같은 스크립트를 포함하거나 불러올 수 있습니다.&lt;/p&gt;

&lt;p&gt;HTML과 CSS 표준의 공동 책임자인 W3C는 명확하고 표상적인 마크업을 위하여 CSS의 사용을 권장합니다.&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;역사&quot;&gt;역사&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;개발&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-03-what-is-html/berners-lee.jpeg&quot; alt=&quot;berners-lee&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;팀 버너스리 - World Wide Web의 창시자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1980년, 유럽 입자 물리 연구소(CERN)의 계약자였었던 물리학자 팀 버너스리가 HTML의 원형인 인콰이어를 제안하였습니다.&lt;br /&gt;
인콰이어는 CERN의 연구원들이 문서를 이용하고 공유하기 위한 체계였습니다.&lt;/p&gt;

&lt;p&gt;1989년에 팀 버너스리는 인터넷 기반 하이퍼텍스트 체계를 제안하는 메모를 작성했습니다.&lt;br /&gt;
버너스 리는 1990년 말에 HTML을 명시하고, 브라우저와 서버 소프트웨어를 작성했습니다.&lt;/p&gt;

&lt;p&gt;그 해에 버너스리와 CERN 데이터 시스템 엔지니어 로버트 카일리아우와 함께 CERN측에 자금 지원을 요청하였지만, 이 프로젝트는 CERN으로부터 정식으로 채택 받지 못했습니다.&lt;/p&gt;

&lt;p&gt;버너스리의 개인적인 기록에 1990년부터 “하이퍼텍스트가 사용되는 여러 분야의 일부”를 열거했고 백과사전을 그 목록의 첫 번째로 두었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;최초 규격&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML 최초의 일반 공개 설명은 1991년 말에 버너스리가 처음으로 인터넷에서 문서를 “HTML 태그”(HTML tag)로 부르면서 시작되었습니다.&lt;/p&gt;

&lt;p&gt;그것은 머릿글자로 이루어진 20개의 요소를 기술하였고, 상대적으로 HTML의 단순한 디자인이었습니다.&lt;br /&gt;
하이퍼링크를 제외한 HTML 태그들은 CERN 자체의 SGML 기반 문서화 포맷인 SGML GUID에 강하게 영향을 받았습니다.&lt;br /&gt;
이 요소 중 13개는 HTML 4 버전에서도 여전히 존재합니다.&lt;/p&gt;

&lt;p&gt;HTML은 동적인 웹 페이지의 웹 브라우저를 통한 문자와 이미지 양식입니다.&lt;br /&gt;
문자 요소의 대부분은 1988년 ISO 기술 보고서 9537 SGML을 이용한 기법에서 찾을 수 있습니다.&lt;br /&gt;
하지만 SGML 개념의 일반적인 마크업은 단지 개별 효과 보다는 요소 기반이고 또한 구조와 처리의 분리(?)(HTML은 CSS와 함께 이 방향으로 점진적으로 이동해 왔습니다.)&lt;/p&gt;

&lt;p&gt;버너스리는 SGML 응용 프로그램이 되는 HTML을 고안해야 했고 그것은 공식적으로 IETF(국제 인터넷 표준화 기구)에 의하여 1993년 중반, HTML 규격에 대한 최초의 제안을 간행물로 정의했습니다.&lt;/p&gt;

&lt;p&gt;(버너스리와 덴 콘놀리에 의한 문법을 규정하는 SGML 문서 형식 정의(SGML DTD)가 포함된 “하이퍼텍스트 마크업 언어(HTML)” 인터넷 초안) 이 초안은 6개월 후 만료되었습니다.&lt;/p&gt;

&lt;p&gt;하지만 NCSA 모자이크 브라우저의 인라인 이미지를 내장하는 사용자 정의 태그의 사례는 주목할 만 했고, 성공적인 프로토타입에 대한 표준을 기반한 IETF의 철학을. 마찬가지로 데이브 라그렛의 경쟁 인터넷 초안인 “HTML+ (하이퍼텍스트 마크업 포맷)”은 1993년 말에 테이블과 기입양식 같은 요소들을 이미 구현하여 표준화 제안을 했습니다.&lt;/p&gt;

&lt;p&gt;이후 1994년 초 HTML과 HTML+ 초안은 만료되었고, IETF는 HTML 작업 그룹을 설립해 1995년에 HTML 2.0을 완성합니다. 최초의 HTML의 규격은 미래에 수행될 HTML 표준을 기반으로 간주되는 경향이 있었습니다.&lt;/p&gt;

&lt;p&gt;RFC 1996년에 HTML 2.0은 HTML과 HTML+ 초안의 아이디어가 포함됐다고 발표했습니다.&lt;br /&gt;
HTML 2.0 지정은 이전의 초안들로부터 새로운 버전을 구별하기 위해서였습니다.&lt;/p&gt;

&lt;p&gt;게다가 IETF의 후원하에 개발은 상충하는 이해 관계 때문에 지연되었습니다.&lt;br /&gt;
1996년부터 HTML 규격은 상용 소프트웨어 제작사의 투입으로 월드 와이드 웹 컨소시엄(W3C)에서 유지해 왔습니다.&lt;/p&gt;

&lt;p&gt;하지만 2000년부터 HTML 또한 국제 표준(ISO/IEC 15445:2000)이 되었습니다.&lt;/p&gt;

&lt;p&gt;W3C는 2014년 10월 28일 &lt;a href=&quot;https://ko.wikipedia.org/wiki/HTML5&quot;&gt;HTML5&lt;/a&gt; 표준안을 확정했다고 발표했습니다.&lt;/p&gt;

&lt;p&gt;이후 2016년 11월 1일 HTML5의 마이너 업데이트 버전인 HTML5.1 표준안을 확정, 2017년 12월 14일 HTML5.2 표준안을 확정했습니다.&lt;br /&gt;
HTML5.3 표준안은 현재 작업 초안 단계로 진행 중입니다.&lt;/p&gt;

&lt;h3 id=&quot;마크업&quot;&gt;마크업&lt;/h3&gt;

&lt;p&gt;HTML 마크업은 HTML 요소(엘리먼트, Elements)와 그들의 속성(Attributes)과 문자 기반 데이터 형태와 문자 참조와 엔티티 참조를 포함하는 몇 가지 핵심 구성 요소로 이루어져 있습니다.&lt;/p&gt;

&lt;p&gt;또 다른 중요한 구성 요소로는 문서 형식 정의(DTD, Document Type Definition)를 명시하는 문서 형식 선언(document type declaration)입니다.&lt;br /&gt;
차기 HTML 5에서는 DTD를 지정하지 않아도 되고 오직 레이아웃 모드로 지정되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello world&lt;/code&gt; 프로그램은 프로그래밍 언어와 스크립트 언어 그리고 마크업 언어를 비교하기 위해 사용되는 일반적인 컴퓨터 프로그램입니다.&lt;/p&gt;

&lt;p&gt;그리고 HTML에서의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello world&lt;/code&gt; 프로그램은 단 9줄에 불과합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello HTML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/html&amp;gt;&lt;/code&gt;사이의 문자는 웹 페이지를 표현합니다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;사이의 문자는 표시되는 페이지의 내용이며,&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;사이의 문자는 눈에는 보이지 않지만 웹 페이지를 표현하기위해 필요한 해더 정보를 담고 있습니다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/title&amp;gt;&lt;/code&gt;사이의 문자는 웹 브라우저의 페이지 제목을 정의하는데 사용되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello world 프로그램을 최대로 짧게 만들고 싶다면&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이라고 해도 되지만, 웹 표준에 위배됩니다.&lt;br /&gt;
이 문서 형식 정의는 HTML 5입니다.&lt;br /&gt;
만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/code&gt;로 선언하지 않은 경우 대다수의 브라우저는 “쿼크 모드”로 렌더링합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;쿼크 모드(Quirks mode, 쿽스 모드)는 오래된 웹 브라우저를 위하여 디자인된 웹 페이지의 하위 호환성을 유지하기 위해 W3C나 IETF의 표준을 엄격히 준수하는 표준 모드(Standards Mode)를 대신하여 쓰이는 웹 브라우저 기술을 가리킨다.&lt;br /&gt;
같은 코드라도 웹 브라우저마다 서로 다르게 해석하므로 전혀 다른 결과물을 보여주게 되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;HTML 요소&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML 문서는 완전한 HTML 요소로 구성되어 있고,&lt;br /&gt;
HTML 요소의 가장 보편적인 형태는 세 가지 구성 요소를 가집니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“시작 태그”(Start Tag)와 “종료 태그”(End Tag) 와 같은 태그 한 쌍&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;몇 가지 요소 속성은 그 태그들 내에서 특성을 부여합니다.&lt;br /&gt;
마지막으로 문자와 그래픽 정보 콘텐츠를 화면에 표현합니다.&lt;/p&gt;

&lt;p&gt;HTML 요소는 태그의 사이와 포함되는 모든 것입니다.&lt;br /&gt;
태그는 꺾쇠괄호(&amp;lt;&amp;gt;)로 둘러싸인 키워드입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML 요소의 일반적인 형태&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;보이는 내용&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HTML 요소의 이름은 태그의 이름입니다.&lt;br /&gt;
그리고 종료 태그의 이름은 슬래시 문자 (“/”)로 시작되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML 요소의 가장 보편적인 형태&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tag&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;attribute1=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;attribute2=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;보이는 내용&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;속성이 주어지지 않습니다면 시작 태그의 기본값을 사용하게 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;태그의 기본적인 형태&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML의 머리부분 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;…&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;), 보통 제목은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;의 안에 포함되었습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;제목&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
단락 구획[편집]
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;단락 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;단락 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새 줄(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 간의 차이점은 ‘br’은 페이지의 의미론적 구조를 변경하지 않는 줄바꿈(breaks a line)인 반면 ‘p’는 단락으로 페이지를 구분합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;이것은 &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 줄바꿈을 &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 포함하는 &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 단락입니다. &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;주석 사용&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--..설명!..--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;주석은 코딩을 이해하는데 도움을 줄 수 있지만 웹 페이지에는 표시되지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML에서 사용되는 마크업 요소의 형태&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;구조적 마크업은 본문의 목적을 표현합니다.&lt;/p&gt;

&lt;p&gt;예를 들어, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;골프&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/code&gt;는 “골프”를 두 번째 수준의 제목으로 규정합니다.&lt;br /&gt;
그리고 그것은 브라우저에서 이 장의 처음에 나오는 HTML 마크업 제목과 유사한 방식으로 해석될 것입니다.&lt;/p&gt;

&lt;p&gt;구조적 마크업은 어떤 특정한 렌더링을 표시하지 않지만, 대부분의 웹 브라우저는 요소 포맷팅에 대한 기본적인 스타일을 표준화했습니다.&lt;br /&gt;
텍스트는 캐스캐이딩 스타일시트(CSS)로 더 꾸밀 수 있습니다.&lt;/p&gt;

&lt;p&gt;표현적 마크업은 기능에 관계없이 본문의 외관을 표현합니다.&lt;br /&gt;
예를 들어, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt;굵은 글씨&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;는 시각적 결과 장치가 굵은 글씨 속에 있는 “boldface”를 해석해야 합니다는 것을 지시하지만,&lt;br /&gt;
이것을 할 수 있는 장치가 무엇을 해야 할 지(예를 들어 텍스트를 크게 읽어주는 장치와 같은 )에 대한 어떠한 지시도 하지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt;굵게&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;i&amp;gt;&lt;/code&gt;이탤릭&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/i&amp;gt;&lt;/code&gt;과 같은 경우에는 보통 시각적 해석에 필적하는 여러 가지 요소가 있지만, 본래가 더 의미론적입니다.&lt;br /&gt;
즉, 각각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;strong emphasis&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;emphasis&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/em&amp;gt;&lt;/code&gt;같이 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;음성 사용자 에이전트가 어떻게 후자의 두 요소를 해석하는 지 지켜보는 것은 쉽습니다.&lt;br /&gt;
그러나 그것은 그들의 표현 상대와 맞먹지는 않습니다.&lt;/p&gt;

&lt;p&gt;예를 들자면 책의 이름을 강조하는 것이 스크린을 읽는 유저에게는 바람직하지 않지만, 화면에서 그러한 이름이 이탤릭체로 될 것입니다.&lt;br /&gt;
대부분의 표현 마크업 요소는 스타일 디자인에 근거한 CSS에 호응해서 HTML 4.0 스펙에서는 받아들여지지 않을 것입니다.&lt;/p&gt;

&lt;p&gt;하이퍼텍스트 마크업은 다른문서와 연결시켜주는 문서의 부분입니다.&lt;br /&gt;
XHTML 1.1 버전을 통한 HTML은 본문속에서 하이퍼링크를 생성하기위해 anchor 요소(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;내 블로그&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/a&amp;gt;&lt;/code&gt;)의 사용을 필요로 합니다.&lt;/p&gt;

&lt;p&gt;덧붙여, href 속성은 반드시 정확한 URL을 설정해야만 합니다.&lt;br /&gt;
예를 들어, HTML 마크업인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://rhea-so.github.io/&quot;&amp;gt;&lt;/code&gt;내 블로그&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/a&amp;gt;&lt;/code&gt;는 하이퍼링크로써 “내 블로그” 처럼 보일 것입니다.&lt;/p&gt;

&lt;p&gt;하이퍼링크로써 이미지를 표현하는 예제&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://example.org&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image.gif&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alternative text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;주요 HTML 요소들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 줄바꾸기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 단락바꾸기(한줄 떨어짐)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; 가로줄&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;center&amp;gt;...&amp;lt;/center&amp;gt;&lt;/code&gt; …을 가운데 정렬&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;font&amp;gt;...&amp;lt;/font&amp;gt;&lt;/code&gt; …의 폰트를 바꿈&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;...&amp;lt;li&amp;gt;...&amp;lt;/ul&amp;gt;&lt;/code&gt; …을 순서없는 목록으로 만듦(기본: 까만동그라미)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ol&amp;gt;&amp;lt;li&amp;gt;...&amp;lt;li&amp;gt;...&amp;lt;/ol&amp;gt;&lt;/code&gt; …을 순서있는 목록으로 만듦(기본: 숫자)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&amp;lt;/table&amp;gt;&lt;/code&gt; 표만들기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;/tr&amp;gt;&lt;/code&gt; 행(&amp;lt;table&amp;gt;…&amp;lt;/table&amp;gt;…에 넣는다)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt; 열(&amp;lt;tr&amp;gt;…&amp;lt;/tr&amp;gt; …에 넣는다)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;td colspan=숫자&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt; 그 셀부터 숫자만큼의 오른쪽 셀을 병합합니다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;td rowspan=숫자&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt; 그셀부터 숫자만큼의 아래쪽 셀을 병합합니다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;속성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;대부분의 요소 속성들은 이름-값 형태이고, “=”로 구분하고, 요소의 시작 태그 안에서 요소의 이름 다음에 쓰입니다.&lt;br /&gt;
값은 외따옴표 또는 쌍따옴표로 둘러쌀 수 있습니다.&lt;br /&gt;
비록 어떤 문자로 구성된 값들이 HTML에서 인용부호 없이 사용될 수도 있지만(XHTML에서는 허용되지 않음), 그 값은 따옴표나 쌍따옴표 또는 쌍 인용부호로 둘러쌀 수 있습니다.&lt;/p&gt;

&lt;p&gt;인용부호를 사용하지 않고, 속성값을 사용하는 것은 안전하지 않습니다.&lt;/p&gt;

&lt;p&gt;이름값 쌍 속성과 대조하여, 요소 태그의 시작에 단순히 그 존재만으로도 영향을 끼칠 수 있는 태그가 있습니다.&lt;/p&gt;

&lt;p&gt;대부분의 요소는 몇 가지 일반적인 속성을 가질 수 있습니다.&lt;/p&gt;

&lt;p&gt;id 속성은 요소에 대한 문서 전체의 고유 식별자를 제공합니다.&lt;br /&gt;
이것은 스타일시트에 의해 외관적인 특성을 제공하고, 브라우저에 의해 특정 요소를 처리하거나 스크립트에 의해 요소의 내용이나 외관을 바꿀 수 있습니다.&lt;br /&gt;
페이지의 URL에 달려 있는 것처럼, 보통 페이지 다음에 오는 요소에 대한 세계에서 유일한 식별자를 부여합니다.&lt;/p&gt;

&lt;p&gt;예를 들어, https://en.wikipedia.org/wiki/HTML#Attributes 에 있는 ID 속성과 같습니다.
class 속성은 유사한 요소를 분류하는 방법을 제공합니다.&lt;br /&gt;
이것은 어휘적 또는 표현적 목적으로 사용될 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 어휘적으로 분류는 미세 포맷에 사용되었습니다.&lt;br /&gt;
표현적 목적으로 HTML 문서는 class=”notation”과 같은 지정자에서, 이 class 값을 갖는 모든 요소는 문서의 주 텍스트에 종속되었습니다는 것을 지시합니다. 이러한 요소는 HTML 소스에서 나타났던 장소에 나타나는 대신에 함께 모여서 페이지에서 각주와 같이 표현되었습니다.&lt;/p&gt;

&lt;p&gt;작성자는 특정 요소에 표현적 속성을 지닌 style 비 속성 코드를 사용할 것입니다.&lt;br /&gt;
단순하고, 특정한 또는 특수한 스타일 속성을 가진 애플리케이션에서는 너무 성가시긴 하지만, 스타일시트로 속성을 선택할 때는 요소의 id나 class 속성을 사용하는 것이 더 낫다고 간주되었습니다.&lt;/p&gt;

&lt;p&gt;title 속성은 요소에서 숨겨진 뜻을 설명하는 글을 첨부하는 곳에 사용되었습니다. &lt;br /&gt;
대부분의 브라우저의 이 속성은 자주 툴팁과 같이 참조하는 것처럼 보입니다.&lt;/p&gt;

&lt;p&gt;단축 요소(abbr)는 아래와 같이 다양한 속성을 설명하는데 쓰일 수 있습니다&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;abbr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aClass&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color:blue;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;하이퍼텍스트 마크업 언어&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/abbr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 예제는 대부분의 브라우저에서 HTML처럼 보입니다.&lt;br /&gt;
이 단축에 커서를 가리키면 그 제목인 “하이퍼텍스트 마크업 언어”가 보일 것입니다.&lt;/p&gt;

&lt;p&gt;대부분의 요소 또한 언어와 관련된 속성인 lang과 dir을 취합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;데이터 형식&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML은 스크립트 데이터와 스타일시트 데이터, 그리고 ID, 이름, URI, 숫자 길이의 단위, 언어, 미디어 기술자, 색상, 문자 인코딩, 날짜와 시간 등을 포함하는 속성 값의 종류를 위한 몇 가지 데이터 형태를 정의 내린다.&lt;br /&gt;
이러한 모든 데이터 형식은 문자 데이터를 최적화하기 위하여 분리되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;문서 형식 선언&lt;/strong&gt;
HTML 문서는 문서 형식 선언 (비공식적으로, “doctype”)으로 시작해야 합니다.&lt;br /&gt;
브라우저에서 doctype의 기능은 렌더링 모드를 지시하는 것이며, 부분적으로는 쿼크 모드를 피하기 위한 목적도 있습니다.&lt;/p&gt;

&lt;p&gt;doctype의 원래의 목적은 문서 형식 정의 (DTD)에 기반한 SGML 도구를 통하여 HTML 문서의 파싱과 유효 여부 확인을 가능하게 하려는 것이었습니다.&lt;br /&gt;
DOCTYPE에 대한 DTD는 DTD에 순응하는 문서를 가진 허용 또는 금지된 내용을 지정하고 기계가 읽을 수 있는 문법을 포함하도록 지시합니다.&lt;/p&gt;

&lt;p&gt;반면 브라우저는 HTML을 SGML의 애플리케이션으로 수행하지 않으며, 결과적으로 DTD를 읽지 않습니다.&lt;br /&gt;
HTML 5는 기술적인 제한으로 인해 DTD를 정의하지 않습니다. &lt;br /&gt;
그래서 HTML5에서 doctype 선언 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/code&gt;는 DTD를 참조하지 않습니다.&lt;/p&gt;

&lt;p&gt;HTML 4 doctype의 예제는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이런 선언은 엄격한 HTML 4.01을 만들기 위해 DTD를 참조합니다.&lt;br /&gt;
이것은 선언적인 요소인 font 같은 요소는 포함하지 않으며, CSS나 span, div 요소는 유지합니다.&lt;br /&gt;
SGML 기반의 유효 확인자(validator)들은 문서를 적절히 해석하거나, 유효 여부 확인을 실행하기 위해 DTD를 읽는다.&lt;/p&gt;

&lt;p&gt;최근의 브라우저에서 이 doctype은 쿼크 모드에 반대되는 표준 모드를 활성화합니다.&lt;/p&gt;

&lt;p&gt;게다가 HTML 4.01은 임시적이고 프레임 단위의 DTD를 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/HTML&quot;&gt;wikipedia - HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 12:58:00 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/what-is-html</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/what-is-html</guid>
        
        
        <category>기본적인-프론트엔드-지식</category>
        
      </item>
    
      <item>
        <title>OSI 모형</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OSI 모형&lt;/strong&gt;(Open Systems Interconnection Reference Model)은 국제표준화기구(ISO)에서 개발한 모델로, 컴퓨터 네트워크 프로토콜 디자인과 통신을 계층으로 나누어 설명한 것입니다.&lt;/p&gt;

&lt;p&gt;일반적으로 &lt;strong&gt;OSI 7 계층이라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;역사&quot;&gt;역사&lt;/h3&gt;

&lt;p&gt;1970년대 말에, 한 프로젝트가 국제 표준화 기구(ISO)에 의해 관리되고 있었고 다른 하나는 국제 전신 자문 위원회(International Telegraph and Telephone Consultative Committee)에 의해 관리되었습니다. 이 두 개의 국제 표준 기구들은 각각 비슷한 네트워킹 모델을 정의해놓은 문서를 만들었습니다.&lt;/p&gt;

&lt;p&gt;1983년에 이 두 문서들은 개방형 시스템 상호 연결을 위한 기초 참조 모델(The Basic Reference Model for Open Systems Interconnection)이라는 이름의 표준을 만들기 위해 병합되었습니다. 이 표준은 보통 OSI 참조 모델(Open Systems Interconnection Reference Model)로 불렸다. 1984년에 ISO가 표준 ISO 7498라는 이름으로 출판하였고, CCITT(현재의 ITU-T)는 표준 X.200으로 출판하였습니다.&lt;/p&gt;

&lt;p&gt;OSI는 기초 참조 모델로 불리는 추상형 네트워킹 모델(abstract model of networking), 그리고 특정한 프로토콜들의 집합, 이렇게 2가지 주된 구성 요소가 있습니다.&lt;/p&gt;

&lt;p&gt;7계층 모델의 개념은 허니웰 인포메이션 서비스(Honeywell Information Services)의 찰스 바크만의 노고에 의해서 탄생하였습니다. 다양한 관점의 OSI 디자인은 ARPANET, NPLNET, EIN, CYCLADES 네트워크, 그리고 IFIP 2G6.1의 작업의 경험에서 발전하였습니다. 새로운 디자인이 ISO 7498 및 여러 부록을 통해 문서화되었습니다. 이 모델에서 네트워킹 시스템은 여러 계층으로 분리되었습니다. 각 레이어마다 하나 이상의 엔티티가 기능을 구현하고 있습니다. 각 엔티티는 자신 아래의 계층과만 통신하며 위의 계층에서 사용할 수 있는 기능을 제공하였습니다.&lt;/p&gt;

&lt;p&gt;OSI 표준 문서는 X.200 시리즈의 권고안으로서 ITU-T를 통해 참조가 가능합니다. 프로토콜 사양 중 일부는 ITU-T X 시리즈의 일부로 참조할 수 있습니다. OSI 모형에 대한 동등한 ISO 및 ISO/IEC 표준은 ISO를 통해 이용이 가능합니다. 모두 무료인 것은 아닙니다.&lt;/p&gt;

&lt;h3 id=&quot;목적&quot;&gt;목적&lt;/h3&gt;

&lt;p&gt;이 모델은 프로토콜을 기능별로 나눈 것입니다.&lt;/p&gt;

&lt;p&gt;각 계층은 하위 계층의 기능만을 이용하고, 상위 계층에게 기능을 제공합니다.&lt;br /&gt;
‘프로토콜 스택’ 혹은 ‘스택’은 이러한 계층들로 구성되는 프로토콜 시스템이 구현된 시스템을 가리키는데, 프로토콜 스택은 하드웨어나 소프트웨어 혹은 둘의 혼합으로 구현될 수 있습니다. 일반적으로 하위 계층들은 하드웨어로, 상위 계층들은 소프트웨어로 구현됩니다.&lt;/p&gt;

&lt;h3 id=&quot;계층-기능&quot;&gt;계층 기능&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-osi-model/osi-model.png&quot; alt=&quot;OSI Model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;계층 1: 물리 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-osi-model/물리계층.png&quot; alt=&quot;물리계층&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물리 계층(Physical layer)은 네트워크의 기본 네트워크 하드웨어 전송 기술을 이룹니다.&lt;br /&gt;
네트워크의 높은 수준의 기능의 논리 데이터 구조를 기초로 하는 필수 계층입니다.&lt;br /&gt;
다양한 특징의 하드웨어 기술이 접목되어 있기에 OSI 아키텍처에서 가장 복잡한 계층으로 간주됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;계층 2: 데이터 링크 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-osi-model/데이터링크계층.png&quot; alt=&quot;데이터링크계층&quot; /&gt;&lt;/p&gt;

&lt;p&gt;데이터 링크 계층(Data link layer)은 포인트 투 포인트(Point to Point) 간 신뢰성있는 전송을 보장하기 위한 계층으로 CRC 기반의 오류 제어와 흐름 제어가 필요합니다.&lt;br /&gt;
네트워크 위의 개체들 간 데이터를 전달하고, 물리 계층에서 발생할 수 있는 오류를 찾아 내고, 수정하는 데 필요한 기능적, 절차적 수단을 제공합니다.&lt;br /&gt;
주소 값은 물리적으로 할당 받는데, 이는 네트워크 카드가 만들어질 때부터 맥 주소(MAC address)가 정해져 있습니다는 뜻입니다.&lt;/p&gt;

&lt;p&gt;주소 체계는 계층이 없는 단일 구조입니다.&lt;br /&gt;
데이터 링크 계층의 가장 잘 알려진 예는 이더넷입니다.&lt;br /&gt;
이 외에도 HDLC나 ADCCP 같은 포인트 투 포인트(point-to-point) 프로토콜이나 패킷 스위칭 네트워크나 LLC, ALOHA 같은 근거리 네트워크용 프로토콜이 있습니다.&lt;/p&gt;

&lt;p&gt;네트워크 브릿지나 스위치 등이 이 계층에서 동작하며, 직접 이어진 곳에만 연결할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프레임에 주소부여(MAC - 물리적주소)&lt;/li&gt;
  &lt;li&gt;에러검출/재전송/흐름제어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;계층 3: 네트워크 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-osi-model/네트워크계층.png&quot; alt=&quot;네트워크계층&quot; /&gt;&lt;/p&gt;

&lt;p&gt;네트워크 계층(Network layer)은 여러개의 노드를 거칠때마다 경로를 찾아주는 역할을 하는 계층으로 다양한 길이의 데이터를 네트워크들을 통해 전달하고, 그 과정에서 전송 계층이 요구하는 서비스 품질(QoS)을 제공하기 위한 기능적, 절차적 수단을 제공합니다.&lt;/p&gt;

&lt;p&gt;네트워크 계층은 라우팅, 흐름 제어, 세그멘테이션(segmentation/desegmentation), 오류 제어, 인터네트워킹(Internetworking) 등을 수행합니다.&lt;/p&gt;

&lt;p&gt;라우터가 이 계층에서 동작하고 이 계층에서 동작하는 스위치도 있습니다.&lt;br /&gt;
데이터를 연결하는 다른 네트워크를 통해 전달함으로써 인터넷이 가능하게 만드는 계층입니다.&lt;br /&gt;
논리적인 주소 구조(IP), 곧 네트워크 관리자가 직접 주소를 할당하는 구조를 가지며, 계층적(hierarchical)입니다.&lt;/p&gt;

&lt;p&gt;서브네트의 최상위 계층으로 경로를 설정하고, 청구 정보를 관리합니다.&lt;br /&gt;
개방형 시스템들의 사이에서 네트워크 연결을 설정, 유지, 해제하는 기능을 부여하고, 전송 계층 사이에 네트워크 서비스 데이터 유닛(NSDU : Network Service Data Unit)을 교환하는 기능을 제공합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주소부여(IP)&lt;/li&gt;
  &lt;li&gt;경로설정(Route)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;계층 4: 전송 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-osi-model/전송계층.png&quot; alt=&quot;전송계층&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전송 계층(Transport layer)은 양 끝단(End to end)의 사용자들이 신뢰성있는 데이터를 주고 받을 수 있도록 해 주어, 상위 계층들이 데이터 전달의 유효성이나 효율성을 생각하지 않도록 해줍니다. 시퀀스 넘버 기반의 오류 제어 방식을 사용합니다.&lt;/p&gt;

&lt;p&gt;전송 계층은 특정 연결의 유효성을 제어하고, 일부 프로토콜은 상태 개념이 있고(stateful), 연결 기반(connection oriented)입니다. 이는 전송 계층이 패킷들의 전송이 유효한지 확인하고 전송 실패한 패킷들을 다시 전송합니다는 것을 뜻합니다. 가장 잘 알려진 전송 계층의 예는 TCP입니다.&lt;/p&gt;

&lt;p&gt;종단간(end-to-end) 통신을 다루는 최하위 계층으로 종단간 신뢰성 있고 효율적인 데이터를 전송하며, 기능은 오류검출 및 복구와 흐름제어, 중복검사 등을 수행합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;패킷 생성(Assembly/Sequencing/Deassembly/Error detection/Request repeat/Flow control)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;계층 5: 세션 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;세션 계층(Session layer)은 양 끝단의 응용 프로세스가 통신을 관리하기 위한 방법을 제공합니다.&lt;br /&gt;
동시 송수신 방식(duplex), 반이중 방식(half-duplex), 전이중 방식(Full Duplex)의 통신과 함께, 체크 포인팅과 유휴, 종료, 다시 시작 과정 등을 수행합니다.&lt;br /&gt;
이 계층은 TCP/IP 세션을 만들고 없애는 책임을 집니다.&lt;/p&gt;

&lt;p&gt;통신하는 사용자들을 동기화하고 오류복구 명령들을 일괄적으로 다룹니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;통신을 하기 위한 세션을 확립/유지/중단 (운영체제가 해줌)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;계층 6: 표현 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;표현 계층(Presentation layer)은 코드 간의 번역을 담당하여 사용자 시스템에서 데이터의 형식상 차이를 다루는 부담을 응용 계층으로부터 덜어 줍니다.&lt;br /&gt;
MIME 인코딩이나 암호화 등의 동작이 이 계층에서 이루어집니다.&lt;br /&gt;
예를 들면, EBCDIC로 인코딩된 문서 파일을 ASCII로 인코딩된 파일로 바꿔 주는 것이 표현 계층의 몫입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자의 명령어를 완성및 결과 표현.&lt;/li&gt;
  &lt;li&gt;포장/압축/암호화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;계층 7: 응용 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;응용 계층(Application layer)은 응용 프로세스와 직접 관계하여 일반적인 응용 서비스를 수행합니다.&lt;br /&gt;
일반적인 응용 서비스는 관련된 응용 프로세스들 사이의 전환을 제공합니다.&lt;/p&gt;

&lt;p&gt;응용 서비스의 예로, 가상 터미널(예를 들어, 텔넷), “Job transfer and Manipulation protocol” (JTM, 표준 ISO/IEC 8832) 등이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 소프트웨어 UI 부분&lt;/li&gt;
  &lt;li&gt;사용자의 입출력(I/O)부분&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/OSI_모형&quot;&gt;OSI 모형&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/ko-kr/learning/ddos/glossary/open-systems-interconnection-model-osi/&quot;&gt;클라우드플레어 측 설명&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Jan 2021 00:35:00 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/what-is-osi-model</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/what-is-osi-model</guid>
        
        
        <category>인터넷</category>
        
      </item>
    
      <item>
        <title>웹의 동작 방식</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;여러분의 컴퓨터나 폰의 웹 브라우저 안에서 웹페이지를 볼 때 무슨 일이 발생하는지에 대한 간소화된 개념을 제공할 것입니다.&lt;/p&gt;

&lt;p&gt;이 이론은 단기적으로 봤을 때 웹 코드를 작성하기 위해 필수적인 것은 아니지만, 머지 않아 백그라운드에서 발생하는 것을 이해하는 것으로부터 오는 장점을 얻게 될 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;클라이언트와-서버&quot;&gt;클라이언트와 서버&lt;/h3&gt;

&lt;p&gt;웹에 연결된 컴퓨터는 &lt;strong&gt;클라이언트&lt;/strong&gt;와 &lt;strong&gt;서버&lt;/strong&gt;라고 합니다.&lt;br /&gt;
그들이 어떻게 상호작용하는가에 대한 간소화된 다이어그램은 다음과 같습니다:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-how-web-works/Client-server.jpg&quot; alt=&quot;client-server&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트는 일반적인 웹 사용자의 인터넷이 연결된 장치들 (예를 들어, 여러분의 컴퓨터는 WI-FI에 연결되어 있고, 또는 여러분의 폰은 모바일 네트워크에 연결되어 있습니다) 과 이런 장치들에서 이용가능한 웹에 접근하는 소프트웨어 (일반적으로 파이어폭스 또는 크롬 과 같은 웹 브라우저) 입니다.&lt;/li&gt;
  &lt;li&gt;서버는 웹페이지, 사이트, 또는 앱을 저장하는 컴퓨터입니다. 클라이언트의 장비가 웹페이지에 접근하길 원할 때, 서버로부터 클라이언트의 장치로 사용자의 웹 브라우저에서 보여지기 위한 웹페이지의 사본이 다운로드 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도구-상자의-다른-부분들&quot;&gt;도구 상자의 다른 부분들&lt;/h3&gt;

&lt;p&gt;위에서 설명한 클라이언트와 서버는 모든 내용을 알려주진 않습니다.&lt;br /&gt;
많은 다른 부분들이 포함되어 있고, 아래에서 그것들에 대해 설명할 것입니다.&lt;/p&gt;

&lt;p&gt;지금은, 웹이 도로라고 상상해봅시다. 도로의 한 쪽 끝은 여러분의 집 같은 클라이언트 입니다.&lt;br /&gt;
다른 한 쪽 끝은 여러분이 뭔가를 사길 원하는 상점같은 서버입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-how-web-works/road.jpg&quot; alt=&quot;road&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트와 서버에 덧붙여서 우리는 다음 내용들도 알아볼 필요가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷 연결: 여러분이 웹에서 데이터를 보내고 받을 수 있게 해줍니다. 기본적으로 여러분의 집과 상점 사이의 거리와 같습니다.&lt;/li&gt;
  &lt;li&gt;TCP/IP: Transmission Control Protocol (전송 제어 규약) 과 Internet Protocol (인터넷 규약) 은 데이터가 어떻게 웹을 건너 여행해야 하는지 정의하는 통신 규약입니다. 이것은 주문을 하고, 상점에 가고, 또 여러분의 상품을 살 수 있게 해주는 운송 장치와 같습니다. 우리 예시에서, 이것은 차 또는 자전거 (또는 여러분의 두 다리) 와 같습니다.&lt;/li&gt;
  &lt;li&gt;DNS: Domain Name System Servers (도메인 이름 시스템 서버) 는 웹사이트를 위한 주소록과 같습니다. 여러분이 브라우저에 웹 주소를 입력할 때, 브라우저는 그 웹사이트를 검색하기 전에 DNS 를 살펴봅니다. 브라우저는 HTTP 메시지를 올바른 장소로 전송하기 위해 그 웹사이트가 있는 서버가 어떤것인지 찾아야 합니다 (아래를 보세요). 이것은 여러분이 접근하기 위해 상점의 주소를 찾아보는 것과 같습니다.&lt;/li&gt;
  &lt;li&gt;HTTP: Hypertext Transfer Protocol (하이퍼텍스트 전송 규약) 은 클라이언트와 서버가 서로 통신할 수 있게 하기 위한 언어를 정의하는 어플리케이션 규약 입니다. 이것은 여러분의 상품을 주문하기 위해 여러분이 사용하는 언어와 같습니다.&lt;/li&gt;
  &lt;li&gt;컴포넌트 파일: 한 웹사이트는 여러분이 상점에서 사는 다양한 종류의 상품들과 같이 많은 다른 파일들로 만들어집니다. 이 파일들은 두개의 주요한 타입이 있습니다:
    &lt;ul&gt;
      &lt;li&gt;코드 파일: 다른 기술들도 잠시 뒤 보게 되실것이지만, 웹사이트는 근본적으로 HTML, CSS, 그리고 JavaScript 로 생성됩니다.&lt;/li&gt;
      &lt;li&gt;자원: 이것은 이미지, 음악, 비디오, 단어 문서, 그리고 PDF 같은, 웹사이트를 만드는 모든 다른 것들을 위한 공동적인 이름입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;그래서-정확히-무슨일이-발생할까요&quot;&gt;그래서 정확히 무슨일이 발생할까요?&lt;/h3&gt;

&lt;p&gt;여러분이 브라우저에 웹 주소를 입력할 때 (우리의 비유에서 상점으로 걸어가는 것과 유사합니다):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;브라우저는 DNS 서버로 가서 웹사이트가 있는 서버의 진짜 주소를 찾습니다 (여러분이 상점의 주소를 찾습니다).&lt;/li&gt;
  &lt;li&gt;그 다음 브라우저는 서버에게 웹사이트의 사본을 클라이언트에게 보내달라는 HTTP 요청 메세지를 서버로 전송합니다.(상점으로 가서 상품을 주문합니다.) 이 메세지, 그리고 클라이언트와 서버 사이에 전송된 모든 데이터는 TCP/IP 연결을 통해서 전송됩니다.&lt;/li&gt;
  &lt;li&gt;이 메세지를 받은 서버는 클라이언트의 요청을 승인하고, “200 OK” 메세지를 클라이언트에게 전송합니다. “200 OK”는 “물론이죠. 당신은 웹 사이트를 볼 수 있어요! 여기 있어요” 라는 의미입니다. 그 다음 서버는 웹사이트의 파일들을 데이터 패킷이라 불리는 작은 일련의 덩어리들로 브라우저에 전송하기 시작합니다.(상점은 여러분이 주문한 상품을 전달하고, 여러분은 그것을 집으로 가져갑니다.)&lt;/li&gt;
  &lt;li&gt;브라우저는 이 작은 덩어리들을 완전한 웹 사이트로 조립하고, 당신에게 보여줍니다. (상품이 당신의 문에 도착합니다. — 새 것이죠, 멋져요!)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;dns-설명&quot;&gt;DNS 설명&lt;/h3&gt;

&lt;p&gt;실제 웹 주소는 멋지거나, 여러분이 선호하는 웹사이트를 찾기 위한 주소 막대에 입력하는 기억할만한 문자가 아닙니다.&lt;br /&gt;
그것은 63.245.217.105 같은 숫자 덩어리입니다.&lt;/p&gt;

&lt;p&gt;이것은 IP 주소라고 하고, 웹의 하나뿐인 특정 위치를 나타냅니다. 그러나 기억하기에 쉽지는 않죠? 그것이 도메인 이름 서버가 발명된 이유입니다.&lt;br /&gt;
도메인 이름 서버는 여러분이 브라우저에 입력하는 웹주소 (“mozilla.org” 같은) 를 웹사이트의 실제 (IP) 주소에 맞춰주는 특별한 서버입니다.&lt;/p&gt;

&lt;p&gt;웹사이트는 그들의 IP 주소를 통해 직접 접근될 수도 있습니다.&lt;br /&gt;
여러분은 IP Checker와 같은 도구에 도메인을 입력해 IP 주소를 찾을 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;패킷-설명&quot;&gt;패킷 설명&lt;/h3&gt;

&lt;p&gt;앞서 우리는 서버에서 클라이언트로 전송되는 데이터의 포맷을 설명하기 위해 “패킷” 이라는 용어를 사용했습니다.&lt;br /&gt;
이게 무엇을 의미하는 걸까요? 기본적으로, 데이터가 웹을 거쳐서 전송될 때, 수천개의 작은 덩어리들로 전송됩니다. 
그래서 다양한 웹 사용자들은 동시에 같은 웹 사이트를 다운로드 할 수 있게 됩니다.&lt;br /&gt;
만약 웹 사이트가 하나의 큰 덩어리들로 전송된다면, 오직 한 번에 하나의 사용자만 다운로드 할 수 있을 것입니다.&lt;br /&gt;
이는 분명 웹을 매우 비효율적이고, 사용하기에 재미없게 만들 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Learn/Getting_started_with_the_web/웹의_동작_방식&quot;&gt;웹의 동작 방식&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Jan 2021 00:23:00 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/how-web-works</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/how-web-works</guid>
        
        
        <category>인터넷</category>
        
      </item>
    
      <item>
        <title>호스팅은 무엇일까요?</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;호스팅이란 정보의 집약체인 서버의 전체 혹은 일부를 이용할 수 있도록 임대해 주는 서비스를 말합니다.&lt;/p&gt;

&lt;p&gt;서버를 관리하기 위해서는 24시간 내내 안정적으로 전기를 공급해야 하고, 빠르고 안정적인 인터넷 회선을 사용해야 하며, 철저한 보안 시스템을 갖추고 있어야 합니다.&lt;/p&gt;

&lt;p&gt;따라서 개인이 서버를 관리하기 보단 전문 업체의 호스팅 서비스를 사용하는 것이 일반적입니다.&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;호스팅의-종류&quot;&gt;호스팅의 종류&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;웹 호스팅&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-hosting/dothome.gif&quot; alt=&quot;dothome&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹 호스팅은 여러 고객이 하나의 서버를 함께 사용하는 형태입니다.&lt;br /&gt;
하나의 서버를 나누어 쓰기 때문에 저렴하게 이용할 수 있고, 호스팅 업체의 통합 관리를 받기에 편리합니다.&lt;br /&gt;
그러나 사용할 수 있는 하드웨어가 제한적이라는 단점도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버 호스팅&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-hosting/IDC.jpg&quot; alt=&quot;IDC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버 호스팅은 고객이 단독 서버를 사용하는 형태입니다.&lt;br /&gt;
넓은 하드웨어 공간을 사용할 수 있고, 서버 운영/관리에 대한 직접적인 권한을 가질 수 있습니다.&lt;br /&gt;
또한, 빠른 데이터 전송 속도도 누릴 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 단독으로 서버를 이용하는 만큼 비용이 높은 편입니다. 
대기업이나 대형 포탈 혹은 대형 오픈마켓과 같이 많은 데이터를 사용하는 기업들이 사용하기 좋습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IDC - &lt;a href=&quot;https://dany-it.tistory.com/172&quot;&gt;https://dany-it.tistory.com/172&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;클라우드 서버&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-02-what-is-hosting/AWS.png&quot; alt=&quot;AWS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버 호스팅을 가상화한 것으로, 가상 서버를 단독으로 사용할 수 있는 형태입니다.&lt;br /&gt;
고객이 필요할 때마다 서버 자원을 늘리거나 축소하여 유연하게 서버를 이용할 수 있습니다.&lt;br /&gt;
하지만 하나의 가상 서버에 문제가 생기면 연결된 다른 가상 서버에도 문제가 생길 수 있다는 단점이 있습니다.&lt;/p&gt;

&lt;p&gt;대표적으로 AWS, Azure, Oracle Cloud가 있습니다&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@sejong202/호스팅은-무엇일까요&quot;&gt;호스팅은 무엇일까요&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Jan 2021 00:10:00 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/what-is-hosting</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/what-is-hosting</guid>
        
        
        <category>인터넷</category>
        
      </item>
    
      <item>
        <title>도메인 네임은 무엇일까요?</title>
        <description>&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;도메인 네임&lt;/strong&gt;(Domain name)은 넓은 의미로는 네트워크상에서 컴퓨터를 식별하는 호스트명을 가리키며, 좁은 의미에서는 도메인 레지스트리에게서 등록된 이름을 의미합니다.&lt;/p&gt;

&lt;p&gt;이를 통틀어서 ‘웹 주소’라고 (잘못) 부르는 경우도 있습니다. 여기서는 후자를 서술합니다.&lt;/p&gt;

&lt;p&gt;등록된 도메인 네임은 보통 호스트명의 일부분으로, DNS 상에서 해당 호스트명 및 그 하위의 호스트명들은 일반적으로 해당 등록자에게 권한이 주어집니다.&lt;/p&gt;

&lt;p&gt;도메인 레지스트리는 도메인 네임의 종류에 따라 국제 인터넷 주소자원 관리기관(ICANN)과 해당 국가 기관으로부터 승인을 받아, 일반 사용자들의 도메인 등록을 위임받는 역할을 합니다.&lt;/p&gt;

&lt;p&gt;이런 도메인 네임은 숫자로 된 IP 주소에 비해 외우기 쉬우며, 여러 개의 IP 주소가 한 도메인에 대응되거나 (서브 도메인) 여러 도메인이 하나의 IP 주소로 대응되는 (가상 호스트) 것도 가능합니다.&lt;/p&gt;

&lt;p&gt;도메인 네임이 항상 호스트명인 것은 아니지만, 호스트명이 아닌 도메인 네임은 대부분 아무 곳에도 사용될 수 없기 때문에 대부분의 도메인 레지스트리들은 호스트명과 같이 도메인 네임에 들어갈 수 있는 문자를 ASCII에서 0부터 9까지, a부터 z까지, 그리고 하이픈으로 등록을 제한하고 있습니다.&lt;/p&gt;

&lt;p&gt;국제화 도메인(IDN)은 임의의 유니코드 문자열을 올바른 호스트명으로 변환하여 이 제한을 회피할 수 있도록 합니다.&lt;/p&gt;

&lt;p&gt;다만 제한적으로 밑줄(_)로 시작하는 도메인은 SRV 레코드와 같이 올바른 호스트명이 아니어야 하는 도메인 네임을 위해서 쓰이기도 합니다.&lt;/p&gt;

&lt;h2 id=&quot;깊게-들어가기&quot;&gt;깊게 들어가기&lt;/h2&gt;

&lt;h3 id=&quot;종류&quot;&gt;종류&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-01-01-how-dns-works/TLD.jpg&quot; alt=&quot;TLD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도메인 네임은 그 최상위 도메인이 암시하는 관리 기관 및 등록 요건에 따라 다음과 같이 나뉩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반 최상위 도메인(gTLD): ICANN이 관리하는 도메인으로 .com, .org, .net 등이 포함됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;대부분 국가와 관계 없이 등록할 수 있기 때문에 국제 도메인이라고 불리기도 하지만, 역사적인 이유로 .mil과 .gov는 미국 국가 기관의 제한을 받습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;국가 코드 최상위 도메인(ccTLD): ISO 3166-1에 의하여 이름이 결정되고 각국의 NIC에서 관리하는 국가별 도메인입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기반 최상위 도메인(iTLD): 인터넷의 하부 구조를 위하여 사용되는 특수한 도메인입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;유일하게 .arpa가 속하지만, 루트 DNS의 vrsn-end-of-zone-marker-dummy-record.root 항목도 여기에 속합니다고 볼 수도 있습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;gTLD의 등록, 관리, 분쟁 및 법적인 문제 등 도메인 네임에 관한 모든 행정적인 절차 및 기술적인 관리는 ICANN에서 결정 및 시행합니다.&lt;/p&gt;

&lt;p&gt;gTLD 중 가장 잘 알려진 .com, .net, .org는 본래 네트워크 솔루션즈에서 독점하고 있었으나 1999년 이후로는 경쟁체제로 전환되었다.&lt;/p&gt;

&lt;p&gt;.int는 본래 IANA가 인터넷의 하부 구조를 위해 사용하던 gTLD였으나, .arpa로 대체되고 현재는 북대서양 조약 기구(NATO) 등의 국제 조약 기구 및 비정부조직을 위해 사용되고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/도메인_네임&quot;&gt;도메인 네임&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Jan 2021 00:03:00 +0900</pubDate>
        <link>http://rhea-so.github.io/archivers/what-is-domain-name</link>
        <guid isPermaLink="true">http://rhea-so.github.io/archivers/what-is-domain-name</guid>
        
        
        <category>인터넷</category>
        
      </item>
    
  </channel>
</rss>
