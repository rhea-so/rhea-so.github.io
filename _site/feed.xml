<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>하고 싶은 걸 하는 블로그</title>
    <description>하고 싶은 걸 하는 블로그</description>
    <link>http://rhea-so.github.io/</link>
    <atom:link href="http://rhea-so.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Jun 2021 14:37:05 +0900</pubDate>
    <lastBuildDate>Tue, 01 Jun 2021 14:37:05 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>이메일 서비스 개발</title>
        <description>&lt;h2 id=&quot;필요성&quot;&gt;필요성&lt;/h2&gt;

&lt;p&gt;이메일로 뉴스나, 전세계 트렌드, 컨퍼런스 일정등을 알려주는 서비스를 만들고 싶었습니다.&lt;br /&gt;
이를 만드려고 보니, 이메일을 보내주는 서비스를 먼저 만들어야 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;목표&quot;&gt;목표&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;안정적인&lt;/strong&gt; 이메일 서비스 개발&lt;/p&gt;

&lt;h2 id=&quot;소스-코드&quot;&gt;소스 코드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rhea-so/EmailService&quot;&gt;https://github.com/rhea-so/EmailService&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;개발-도구&quot;&gt;개발 도구&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;VSCode v1.56.2&lt;/li&gt;
  &lt;li&gt;NodeJS v12 Erbium
    &lt;ul&gt;
      &lt;li&gt;NodeMailer v6.6.1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Typescript v4.3.2
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rhea-so/Typescript&quot;&gt;Repository Template&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RabbitMQ v3.8.9&lt;/li&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;Kubernetes&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;아키텍처-구상&quot;&gt;아키텍처 구상&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/email-service-구상-1.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-서버를-이메일-전송-서버-요청-수신-서버로-분리했습니다&quot;&gt;1. 서버를 이메일 전송 서버, 요청 수신 서버로 분리했습니다.&lt;/h3&gt;

&lt;p&gt;하나의 서버에서 모든 것을 처리하지 않습니다. 각자 작은 일들 하나씩 맡아 처리합니다.&lt;/p&gt;

&lt;p&gt;저는 Micro Service Architecture를 좋아합니다.&lt;/p&gt;

&lt;p&gt;나중에 “이메일 전송 부분”에 수정이 있거나 “요청 수신 부분”에 수정이 있을때, 다른 서버들에게 미치는 영향을 최소화 할 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;무중단 배포에도 용이하고, 오토 스케일링도 유연하게 할 수 있어서 좋습니다.&lt;/p&gt;

&lt;h3 id=&quot;2-message-queue를-사용해-서버-간-결합을-느슨하게-했습니다&quot;&gt;2. Message Queue를 사용해 서버 간 결합을 느슨하게 했습니다.&lt;/h3&gt;

&lt;p&gt;“이메일 전송 요청”과 “이메일 전송”은 강한 결합을 띄고 있습니다. (n대 n)&lt;/p&gt;

&lt;p&gt;“이메일 전송 요청”이 없으면 “이메일 전송”은 실행 될 수 없습니다.&lt;/p&gt;

&lt;p&gt;즉, “요청 수신 서버”와 “이메일 전송 서버” 간에는 통신이 필요합니다.&lt;/p&gt;

&lt;p&gt;HTTP Request로 통신을 할 수 있습니다만, 전 아닌 것 같다고 판단했습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Circuit Breaking을 직접 구현해야합니다.
    &lt;ol&gt;
      &lt;li&gt;구현한다고 하더라도, HTTP Request를 보내는 서버가 장애 상황 조치 중 죽어버리면 의미가 없습니다.&lt;/li&gt;
      &lt;li&gt;모든 “이메일 전송 서버”가 죽어있다면, “요청 서버”에 부하가 이메일 요청이 들어올수록 점점 심해집니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;단일 서버로 띄워서 통신한다면, 단일 End Point를 사용하면 되지만 Scaling을 한다면 Load Balancer를 만들어줘야 합니다
    &lt;ol&gt;
      &lt;li&gt;Load Balancer는 비쌉니다..&lt;/li&gt;
      &lt;li&gt;“이메일 전송 서버”에 Load Balancer를 붙히는 이유가 “요청 수신 서버”와 통신하기 위해서인데. 기회비용이 너무 큽니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;이메일을 보내는 중에 에러가 발생한 경우, 이메일이 증발됩니다.&lt;/li&gt;
  &lt;li&gt;장애 상황 대처가 힘듭니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–&amp;gt; 위 같은 문제들로 인해, Message Queue를 사용하기로 했습니다.&lt;/p&gt;

&lt;p&gt;관리자가 이메일 등록기에 요청을 보내면 이를 RabbitMQ로 보내고, 이메일 전송기가 RabbitMQ로부터 이메일 요청을 뽑아와 전송하는 구조입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/email-service-구상-2.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이메일을 등록하는 부분과 전송하는 부분을 분리한 이유는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kubernetes Deployment를 분리함으로써 장애 피해를 최소화 할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;이메일을 전송하는 로직에서 장애가 발생해도, 이메일 등록에는 문제가 없습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수정이 필요한 서버만 업데이트하면 되기 때문에 전체적으로 업데이트로 인한 서비스 불안정 요소를 최소화 할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;전송 로직에 수정이 필요하면, 전송하는 서버만 재부팅하면 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Auto-Scaling을 좀 더 유연하게 할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;이메일 전송에 부하가 심하면, 이메일 전송 서버만 늘리면 되고, 이메일 등록에 부하가 심하면, 이메일 등록 서버만 늘리면 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;변경을 유연하게 대처할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;완전 새로운 이메일 등록 서버를 만들어도, 이메일 전송 서버는 그대로 사용할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 구조를 보면, RabbitMQ(Message Queue)가 서버들 사이에 위치해 있습니다.&lt;/p&gt;

&lt;p&gt;이메일 등록 서버와 전송 서버 사이를 HTTP나 Socket.io 등의 통신이 아닌 Message Queue로 연결한 이유는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Loose Coupling
    &lt;ul&gt;
      &lt;li&gt;전송 서버와 등록 서버는 로직적으로 서로가 엮여있지 않기 때문에, 서비스 자체의 유연성과 재사용성을 늘릴 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Horizontal Scaling
    &lt;ul&gt;
      &lt;li&gt;여러 대의 서버가 하나의 Queue를 바라보도록 구성하면 처리할 데이터가 많아져도 각 서버는 자신의 처리량에 맞게 이메일 요청을 가져와 처리할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 손실 방지
    &lt;ul&gt;
      &lt;li&gt;이메일 전송 처리를 하는 도중에 갑작스럽게 서버가 죽은 경우, 이에 대한 요청이 다시 Queue로 돌아가기 때문에 장애 조치가 가능합니다.&lt;/li&gt;
      &lt;li&gt;요청이 무시되는 Case를 제거할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;부하 분산
    &lt;ul&gt;
      &lt;li&gt;처리해야 할 이메일들을 Queue에 넣어두고 이메일 전송 서버는 자신이 동시에 처리할 수 있는 양에 따라 하나의 이메일 전송. 전송이 끝나면 다음에 처리할 이메일 정보를 Queue에서 가져와 처리하면 됩니다.&lt;/li&gt;
      &lt;li&gt;많은 요청으로 인한 서버 다운이 일어나지 않습니다. 딱 서버 본인이 가능한 만큼만 이메일 정보를 전달합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;통신에 대한 이점
    &lt;ul&gt;
      &lt;li&gt;failover에 대한 코드를 안짜도 됩니다.&lt;/li&gt;
      &lt;li&gt;Queue에 넣고 빼는 코드만 짜면 되기 때문에 굉장히 단순합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터의 가시화
    &lt;ul&gt;
      &lt;li&gt;전 Queue를 통해 데이터를 주고 받는게, 코드로 표현했을때 꽤나 괜찮아보였습니다. 어떤 데이터를 주고 받는지를 한 눈에 명확하게 보였습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/email-service-구상-3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Slack을 이용해 채팅 하나로 서버를 업데이트 할 수 있으면 좋을 것 같습니다.
서버를 업데이트하기 위해 매번 VM에 접속해서 명령어를 치는건 너무 불편하니까..&lt;/p&gt;

&lt;p&gt;내가 편한게 최고니까.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;nodemailer를-사용한-이메일-전송&quot;&gt;NodeMailer를 사용한 이메일 전송&lt;/h2&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeMailer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;nodemailer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transporter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;gmail&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;smtp.gmail.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GMAIL_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GMAIL_PASSWORD&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;transporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GMAIL_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rabbitmq-사용-방법&quot;&gt;RabbitMQ 사용 방법&lt;/h2&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RabbitMQ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;rhea-rabbitmq&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NPM에 없습니다. 개인 NPM 저장소에 올렸습니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RabbitMQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;serverAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RABBITMQ_ADDRESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RABBITMQ_USERNAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RABBITMQ_PASSWORD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;vhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RABBITMQ_VHOST&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 이미 Queue가 생성되어있는 경우는, 아무 일도 하지 않습니다.&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RABBITMQ_QUEUE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RABBITMQ_QUEUE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IEmailRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 이메일 전송&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RABBITMQ_QUEUE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 전달할 데이터&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;graceful-shutdown&quot;&gt;Graceful Shutdown&lt;/h2&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gracefulShutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5초 안에 남아있는 모든 이메일 전송이 완료되는 것으로 판단함&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;SIGTERM&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gracefulShutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gracefulShutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;이메일-전송-서버-구현&quot;&gt;이메일 전송 서버 구현&lt;/h2&gt;

&lt;h3 id=&quot;수신-차단-목록-관리&quot;&gt;수신 차단 목록 관리&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;이메일-등록-서버-구현&quot;&gt;이메일 등록 서버 구현&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;kubernetes-배포&quot;&gt;Kubernetes 배포&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;서비스-동작&quot;&gt;서비스 동작&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;소감&quot;&gt;소감&lt;/h2&gt;
</description>
        <pubDate>Fri, 28 May 2021 00:00:00 +0900</pubDate>
        <link>http://rhea-so.github.io/%EA%B0%9C%EB%B0%9C/2021/05/28/email-service-development.html</link>
        <guid isPermaLink="true">http://rhea-so.github.io/%EA%B0%9C%EB%B0%9C/2021/05/28/email-service-development.html</guid>
        
        
        <category>개발</category>
        
      </item>
    
  </channel>
</rss>
